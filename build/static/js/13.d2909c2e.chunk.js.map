{"version":3,"sources":["../node_modules/react-phone-number-input/modules/PhoneInput.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/util.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/extension.js","../node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/getNumberType_.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/IDD.js","../node_modules/libphonenumber-js/es6/RFC3966.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/findNumbers/LRUCache.js","../node_modules/libphonenumber-js/es6/findNumbers/RegExpCache.js","../node_modules/libphonenumber-js/es6/findNumbers/util.js","../node_modules/libphonenumber-js/es6/findNumbers/utf-8.js","../node_modules/libphonenumber-js/es6/findNumbers/Leniency.js","../node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","../node_modules/libphonenumber-js/es6/findNumbers/isValidPreCandidate.js","../node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js","../node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js","../node_modules/libphonenumber-js/es6/findNumbers.js","../node_modules/libphonenumber-js/es6/findNumbers_.js","../node_modules/libphonenumber-js/es6/searchNumbers.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/getCountries.js","../node_modules/libphonenumber-js/es6/getExampleNumber.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../node_modules/libphonenumber-js/core/index.js","../node_modules/react-phone-number-input/modules/PhoneInputNativeDefaultMetadata.js","../node_modules/react-phone-number-input/modules/PropTypes.js","../node_modules/react-phone-number-input/modules/countries.js","../node_modules/react-phone-number-input/index.js","../node_modules/react-phone-number-input/modules/PhoneInputNativeDefaults.js","../node_modules/react-phone-number-input/modules/InternationalIcon.js","../node_modules/react-phone-number-input/modules/PhoneInputNative.js","../node_modules/react-phone-number-input/modules/InputBasic.js","../node_modules/react-phone-number-input/modules/Flag.js","../node_modules/react-phone-number-input/modules/input-control.js","../node_modules/react-phone-number-input/modules/CountrySelectNative.js"],"names":["Object","defineProperty","exports","value","default","undefined","_class","_class2","_temp","_initialiseProps","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react2","_interopRequireDefault","__webpack_require__","_propTypes2","_classnames2","_reactLifecyclesCompat","_core","_InputBasic2","_Flag2","_PropTypes","_inputControl","_countries2","obj","__esModule","PureComponent","Component","PhoneNumberInput","polyfill","_PureComponent","instance","TypeError","_classCallCheck","this","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","_this$props","labels","international","metadata","_this$props2","country","countries","countryOptions","isCountrySupportedWithError","filterCountries","filterCountryOptions","phoneNumber","parsePhoneNumber","pre_selected_country","getPreSelectedCountry","getCountryCodes","filter","_","state","country_select_options","generateCountrySelectOptions","parsed_input","generateParsedInput","subClass","superClass","create","constructor","setPrototypeOf","_inherits","onCountryChange","selectedCountry","prevProps","prevState","_props","name","disabled","disablePhoneInput","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectAriaLabel","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","countrySelectProps","InputComponent","inputComponent","numberInputComponent","numberInputProps","ext","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","phoneNumberInputProps","keys","indexOf","_objectWithoutProperties","_state","hidePhoneInputField","isFocused","_countrySelectProps","createElement","react-phone-number-input--focus","react-phone-number-input--invalid","ref","storeCountrySelectInstance","aria-label","tabIndex","options","onChange","onFocus","_onFocus","onBlur","_onBlur","focusPhoneInputField","focus","type","storePhoneNumberInputInstance","onKeyDown","onPhoneNumberKeyDown","react-phone-number-input__input--disabled","react-phone-number-input__input--invalid","invalid","cloneElement","event","parseDigits","parseExtDigits","hasUserSelectedACountry","_state$props","old_default_country","old_value","new_default_country","new_value","new_state","parsedCountry","_countries","propTypes","string","func","isRequired","bool","arrayOf","objectOf","elementType","number","object","node","defaultProps","_this2","new_country","_props2","_state2","old_parsed_input","old_country","new_parsed_input","migrateParsedInputForNewCountry","e164","setState","_input","_props3","_parseInput","parseInput","input","_event","stopPropagation","preventDefault","hide","number_input","country_select","CountrySelectOptionIcon","FlagComponent","InternationalIcon","_ref2","react-phone-number-input__icon--international","createCountrySelectOptionIconComponent","transform","optionsOnTop","optionsOnBottom","appendTo","_loop","_isArray","_i","_iterator","_ref3","next","done","element","push","divider","index","option","splice","Array","isArray","Symbol","iterator","_ret","concat","transformCountryOptions","getCountrySelectOptions","isCountrySupported","map","_ref","label","icon","generateNationalNumberDigits","console","countryOption","isCountryOptionSupportedWithError","ParseError","code","message","stack","Error","es6_ParseError","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","matchesEntirely","text","regular_expression","RegExp","test","_typeof","metadata_classCallCheck","V3","DEFAULT_EXT_PREFIX","metadata_Metadata","Metadata","is_object","country_calling_codes","country_phone_code_to_countries","join","type_of","validateMetadata","v1","version","v2","a","b","pa","split","pb","na","Number","nb","isNaN","cmp","v3","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","formats","_getFormats","getDefaultCountryMetadataForRegion","Format","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","metadata_getType","Type","country_calling_code","es6_metadata","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","replace","possibleLengths","getExtPrefix","getCountryCallingCode","isSupportedCountry","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERNS_FOR_MATCHING","EXTN_PATTERN","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","character","result","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","NON_FIXED_LINE_PHONE_TYPES","getNumberType","nationalNumber","phone","nationalNumberPattern","is_of_type","pattern","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","slice","sort","mergeArrays","actual_length","minimum_length","is_possible_number","national_number","is_international","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","_slicedToArray","arr","_arr","_n","_d","_e","_s","err","sliceIterator","parseRFC3966","_part$split","_part$split2","formatRFC3966","isValidNumber","defaultOptions","formatExtension","formattedNumber","extension","format_formatNumber","chooseCountryByCountryCallingCode","addExtension","format_national_number","fromCountry","IDDPrefix","countryMetadata","defaultIDDPrefix","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","format_national_number_using_format","useInternationalFormat","includeNationalPrefixForNationalFormat","internationalFormat","changeInternationalFormatStyle","format_as","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","search","choose_format_for_number","local","trim","PhoneNumber_extends","PhoneNumber_createClass","es6_PhoneNumber","PhoneNumber","PhoneNumber_classCallCheck","isCountryCode","_metadata","isPossibleNumber_isPossibleNumber","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","defaultCountry","_parse_input","extract_formatted_phone_number","with_extension_stripped","start","number_without_extension","matches","match","extractExtension","parse_input","formatted_phone_number","_parse_phone_number","default_country","_extractCountryCallin","parse_extractCountryCallingCode","_parse_national_numbe","carrier_code","_strip_national_prefi","strip_national_prefix_and_carrier_code","potential_national_number","carrierCode","parse_national_number","exactCountry","find_country_code","parse_phone_number","valid","extended","possible","parse_result","starts_at","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_prefix","national_phone_number","possible_countries","leadingDigits","_find_country_code","numberWithoutIDD","IDDPrefixPattern","matchedGroups","stripIDDPrefix","parsePhoneNumber_extends","parsePhoneNumber_typeof","es6_parsePhoneNumber_extends","parsePhoneNumber_slicedToArray","parsePhoneNumber_parsePhoneNumber","_normalizeArguments","normalizeArguments","args","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString_extends","parsePhoneNumberFromString_parsePhoneNumberFromString","parsePhoneNumberFromString","LRUCache_createClass","LRUCache_classCallCheck","Node","prev","findNumbers_LRUCache","LRUCache","limit","size","head","tail","cache","ensureLimit","remove","put","log","RegExpCache_createClass","findNumbers_RegExpCache","RegExpCache","RegExpCache_classCallCheck","regExp","get","lower","upper","trimAfterFirstMatch","regexp","_pZ","pZ","_pL","pL_regexp","pSc_regexp","pMn_regexp","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","Leniency","POSSIBLE","candidate","VALID","containsOnlyValidXChars","toString","STRICT_GROUPING","regExpCache","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","substring","MatchType","NSN_MATCH","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","SECOND_NUMBER_START_PATTERN","parsePreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","PhoneNumberMatcher_extends","PhoneNumberMatcher_createClass","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Math","pow","es6_PhoneNumberMatcher","PhoneNumberMatcher","PhoneNumberMatcher_classCallCheck","searchIndex","leniency","maxTries","parseAndVerify","extractInnerMatch","startsAt","endsAt","isFirstMatch","possibleInnerMatch","_group","_match","group","previousChar","lastCharIndex","nextChar","isValidCandidate","lastMatch","find","hasNext","findNumbers_findNumbers","matcher","results","findNumbers","searchNumbers","AsYouType_createClass","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","es6_AsYouType","AsYouType","AsYouType_classCallCheck","reset","extracted_number","processInput","currentOutput","parsedInput","resetCountriness","isInternational","determineTheCountry","extractCountryCallingCode","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","previous_national_prefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","resetCountry","template","partially_populated_template","last_match_position","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leading_digits_pattern_index","min","leading_digits_pattern","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","isPossibleNumber","_iterator2","_isArray2","_i2","nationalPrefixIsMandatoryWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","_iterator3","_isArray3","_i3","cut_stripping_dangling_braces","cut_before_index","dangling_braces","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","strip_dangling_braces","times","getCountries","getExampleNumber","examples","formatIncompletePhoneNumber","d","__webpack_exports__","_metadataMin","_metadataMin2","_PhoneInputNativeDefaults","createPhoneInput","_propTypes","shape","toUpperCase","SKIP_COUNTRIES","getCountryCodeForFlag","_modules_PhoneInputNativeDefaultMetadata__WEBPACK_IMPORTED_MODULE_0__","_modules_PhoneInputNativeDefaultMetadata__WEBPACK_IMPORTED_MODULE_0___default","n","_react","_default2","_InternationalIcon2","_PhoneInputNative2","defaultMetadata","_temp2","_Component","PhoneInputNativeDefaults","_len","_key","apply","storeInputRef","render","xmlns","viewBox","stroke","fill","strokeWidth","strokeLinecap","x1","y1","x2","y2","_PhoneInput2","_CountrySelectNative2","PhoneInputNative","countrySelectArrowComponent","COUNTRY_SELECT_PROPERTIES","createInput","InputBasic","newValue","storeInput","Input","rest","alt","src","toLowerCase","includeInternationalOption","country_names","compare_strings","unshift","ZZ","formatNational","previous_country","preferNationalFormat","strip_country_calling_code","trimNumber","getCountryForPartialE164Number","prevInput","get_country_from_possibly_incomplete_international_phone_number","get_national_significant_number_part","could_number_belong_to_country","partial_national_significant_number","overflowDigitsCount","getMaxNumberLength","partialE164Number","derived_country","formatter","localeCompare","country_calling_prefix","getNationalNumber","CountrySelectNative","SelectArrow","selectArrowComponent","selectedOption"],"mappings":"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","file":"static/js/13.d2909c2e.chunk.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _class2, _temp, _initialiseProps; // import InputSmart from './InputSmart'\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _core = require('libphonenumber-js/core');\n\nvar _InputBasic = require('./InputBasic');\n\nvar _InputBasic2 = _interopRequireDefault(_InputBasic);\n\nvar _Flag = require('./Flag');\n\nvar _Flag2 = _interopRequireDefault(_Flag);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _inputControl = require('./input-control');\n\nvar _countries2 = require('./countries');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nvar PhoneNumberInput = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp = _class2 = function (_PureComponent) {\n  _inherits(PhoneNumberInput, _PureComponent);\n\n  function PhoneNumberInput(props) {\n    _classCallCheck(this, PhoneNumberInput);\n\n    var _this = _possibleConstructorReturn(this, (PhoneNumberInput.__proto__ || Object.getPrototypeOf(PhoneNumberInput)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var _this$props = _this.props,\n        value = _this$props.value,\n        labels = _this$props.labels,\n        international = _this$props.international,\n        metadata = _this$props.metadata;\n    var _this$props2 = _this.props,\n        country = _this$props2.country,\n        countries = _this$props2.countries,\n        countryOptions = _this$props2.countryOptions; // Validate `country`.\n\n    if (country) {\n      if (!_this.isCountrySupportedWithError(country)) {\n        country = undefined;\n      }\n    } // Validate `countries`.\n\n\n    countries = filterCountries(countries, metadata); // Validate `countryOptions`.\n\n    countryOptions = filterCountryOptions(countryOptions, metadata);\n    var phoneNumber = (0, _inputControl.parsePhoneNumber)(value, metadata);\n    var pre_selected_country = (0, _inputControl.getPreSelectedCountry)(phoneNumber, country, countries || (0, _countries2.getCountryCodes)(labels).filter(function (_) {\n      return _ === 'ZZ' || metadata.countries[_];\n    }), international, metadata);\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: pre_selected_country,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: countries,\n      // Generate country `<select/>` options.\n      country_select_options: generateCountrySelectOptions(countries, countryOptions, _this.props),\n      // `parsed_input` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsed_input` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsed_input` is `+78005553535`.\n      parsed_input: generateParsedInput(value, phoneNumber, _this.props),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsed_input` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsed_input` and `country` should be updated.\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.props.country;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (!country || !this.isCountrySupportedWithError(country)) {\n          country = undefined;\n        }\n\n        if (selectedCountry !== country) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && this.state.country !== prevState.country) {\n        onCountryChange(this.state.country);\n      }\n    } // A shorthand for not passing `metadata` as a second argument.\n    // Country `<select/>` `onChange` handler.\n    // Phone number `<input/>` `onKeyDown` handler.\n\n    /**\r\n     * `<input/>` `onChange()` handler.\r\n     * Updates `value` property accordingly (so that they are kept in sync).\r\n     * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    // Toggles the `--focus` CSS class.\n    // Toggles the `--focus` CSS class.\n    // This `onBlur` interceptor is a workaround for `redux-form`\n    // so that it gets the up-to-date `value` in its `onBlur` handler.\n    // Without this fix it just gets the actual (raw) input field textual value.\n    // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n    //\n    // A developer is not supposed to pass this `onBlur` property manually.\n    // Instead, `redux-form` passes `onBlur` to this component automatically\n    // and this component patches that `onBlur` handler (a hacky way but works).\n    //\n    // When country `<select/>` is toggled.\n    // Can be called externally.\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          name = _props.name,\n          disabled = _props.disabled,\n          disablePhoneInput = _props.disablePhoneInput,\n          autoComplete = _props.autoComplete,\n          countrySelectTabIndex = _props.countrySelectTabIndex,\n          showCountrySelect = _props.showCountrySelect,\n          style = _props.style,\n          className = _props.className,\n          inputClassName = _props.inputClassName,\n          getInputClassName = _props.getInputClassName,\n          countrySelectAriaLabel = _props.countrySelectAriaLabel,\n          countrySelectProperties = _props.countrySelectProperties,\n          error = _props.error,\n          indicateInvalid = _props.indicateInvalid,\n          CountrySelectComponent = _props.countrySelectComponent,\n          countrySelectProps = _props.countrySelectProps,\n          InputComponent = _props.inputComponent,\n          inputComponent = _props.numberInputComponent,\n          numberInputProps = _props.numberInputProps,\n          ext = _props.ext,\n          _ = _props.country,\n          countries = _props.countries,\n          countryOptions = _props.countryOptions,\n          labels = _props.labels,\n          flags = _props.flags,\n          flagComponent = _props.flagComponent,\n          flagsPath = _props.flagsPath,\n          international = _props.international,\n          internationalIcon = _props.internationalIcon,\n          displayInitialValueAsLocalNumber = _props.displayInitialValueAsLocalNumber,\n          onCountryChange = _props.onCountryChange,\n          limitMaxLength = _props.limitMaxLength,\n          metadata = _props.metadata,\n          phoneNumberInputProps = _objectWithoutProperties(_props, ['name', 'disabled', 'disablePhoneInput', 'autoComplete', 'countrySelectTabIndex', 'showCountrySelect', 'style', 'className', 'inputClassName', 'getInputClassName', 'countrySelectAriaLabel', 'countrySelectProperties', 'error', 'indicateInvalid', 'countrySelectComponent', 'countrySelectProps', 'inputComponent', 'numberInputComponent', 'numberInputProps', 'ext', 'country', 'countries', 'countryOptions', 'labels', 'flags', 'flagComponent', 'flagsPath', 'international', 'internationalIcon', 'displayInitialValueAsLocalNumber', 'onCountryChange', 'limitMaxLength', 'metadata']);\n\n      var _state = this.state,\n          country = _state.country,\n          hidePhoneInputField = _state.hidePhoneInputField,\n          country_select_options = _state.country_select_options,\n          parsed_input = _state.parsed_input,\n          isFocused = _state.isFocused; // const InputComponent = InputComponent || (smartCaret ? InputSmart : InputBasic)\n      // Extract `countrySelectProperties` from `this.props`\n      // also removing them from `phoneNumberInputProps`.\n\n      var _countrySelectProps = {};\n\n      if (countrySelectProperties) {\n        for (var key in countrySelectProperties) {\n          if (this.props.hasOwnProperty(key)) {\n            _countrySelectProps[countrySelectProperties[key]] = this.props[key];\n            delete phoneNumberInputProps[key];\n          }\n        }\n      } // Could use something like `aria-label={labels.phone}` on the `<InputComponent/>`,\n      // however, some users may have already been using this component with one of:\n      // * `<label/>` container\n      // * `aria-labelledby`\n      // * `id` and `<label for/>`\n      // https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships\n      // Maybe in some future major version update.\n\n\n      return _react2.default.createElement('div', {\n        style: style,\n        className: (0, _classnames2.default)('react-phone-number-input', {\n          'react-phone-number-input--focus': isFocused,\n          'react-phone-number-input--invalid': error && indicateInvalid\n        }, className)\n      }, _react2.default.createElement('div', {\n        className: 'react-phone-number-input__row'\n      }, showCountrySelect && _react2.default.createElement(CountrySelectComponent, _extends({}, _countrySelectProps, {\n        ref: this.storeCountrySelectInstance,\n        name: name ? name + '__country' : undefined,\n        'aria-label': countrySelectAriaLabel || labels.country,\n        tabIndex: countrySelectTabIndex\n      }, countrySelectProps, {\n        value: country,\n        options: country_select_options,\n        onChange: this.onCountryChange,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        disabled: disabled,\n        hidePhoneInputField: this.hidePhoneInputField,\n        focusPhoneInputField: this.focus,\n        className: 'react-phone-number-input__country'\n      })), !hidePhoneInputField && _react2.default.createElement(InputComponent, _extends({\n        type: 'tel',\n        autoComplete: autoComplete\n      }, numberInputProps, phoneNumberInputProps, {\n        ref: this.storePhoneNumberInputInstance,\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: parsed_input || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onPhoneNumberKeyDown,\n        disabled: disabled || disablePhoneInput,\n        inputComponent: inputComponent,\n        className: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__phone', {\n          'react-phone-number-input__input--disabled': disabled || disablePhoneInput,\n          'react-phone-number-input__input--invalid': error && indicateInvalid\n        }, inputClassName, getInputClassName && getInputClassName({\n          disabled: disabled || disablePhoneInput,\n          invalid: error && indicateInvalid\n        }))\n      })), ext && !hidePhoneInputField && _react2.default.createElement('label', {\n        className: 'react-phone-number-input__ext'\n      }, labels.ext, _react2.default.cloneElement(ext, {\n        onChange: ext.props.onChange ? function (event) {\n          return ext.props.onChange(parseExtDigits(event));\n        } : undefined,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        className: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__ext-input', {\n          'react-phone-number-input__input--disabled': disabled || disablePhoneInput\n        }, inputClassName, getInputClassName && getInputClassName({\n          disabled: disabled || disablePhoneInput\n        }), ext.props.className)\n      }))), error && indicateInvalid && _react2.default.createElement('div', {\n        className: 'react-phone-number-input__error'\n      }, error));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    value: function getDerivedStateFromProps(props, state) {\n      var country = state.country,\n          hasUserSelectedACountry = state.hasUserSelectedACountry,\n          value = state.value,\n          _state$props = state.props,\n          old_default_country = _state$props.country,\n          old_value = _state$props.value;\n      var metadata = props.metadata,\n          countries = props.countries,\n          new_default_country = props.country,\n          new_value = props.value;\n      var new_state = {\n        // Emulate `prevProps` via `state.props`.\n        props: props,\n        // If the user has already manually selected a country\n        // then don't override that already selected country\n        // if the default `country` property changes.\n        // That's what `hasUserSelectedACountry` flag is for.\n        hasUserSelectedACountry: hasUserSelectedACountry // If `countries` or `labels` or `international` changed\n        // then re-generate country `<select/>` options.\n\n      };\n\n      if (props.countries !== state.props.countries || props.labels !== state.props.labels || props.international !== state.props.international) {\n        // Re-generate country select options.\n        new_state.country_select_options = generateCountrySelectOptions(filterCountries(props.countries, metadata), filterCountryOptions(props.countryOptions, metadata), props);\n      } // If the default country changed.\n      // (e.g. in case of ajax GeoIP detection after page loaded)\n      // then select it but only if the user hasn't already manually\n      // selected a country and no phone number has been entered so far.\n      // Because if the user has already started inputting a phone number\n      // then he's okay with no country being selected at all (\"International\")\n      // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\n\n      if (new_default_country !== old_default_country && !hasUserSelectedACountry && !value && !new_value) {\n        return _extends({}, new_state, {\n          country: isCountrySupportedWithError(new_default_country, metadata) ? new_default_country : old_default_country // `value` is `undefined`.\n          // `parsed_input` is `undefined` because `value` is `undefined`.\n\n        });\n      } // If a new `value` is set externally.\n      // (e.g. as a result of an ajax API request\n      //  to get user's phone after page loaded)\n      // The first part — `new_value !== old_value` —\n      // is basically `props.value !== prevProps.value`\n      // so it means \"if value property was changed externally\".\n      // The second part — `new_value !== value` —\n      // is for ignoring the `getDerivedStateFromProps()` call\n      // which happens in `this.onChange()` right after `this.setState()`.\n      // If this `getDerivedStateFromProps()` call isn't ignored\n      // then the country flag would reset on each input.\n      else if (new_value !== old_value && new_value !== value) {\n          var phoneNumber = (0, _inputControl.parsePhoneNumber)(new_value, metadata);\n          var parsedCountry = void 0;\n\n          if (phoneNumber) {\n            var _countries = filterCountries(props.countries, metadata);\n\n            if (!_countries || _countries.indexOf(phoneNumber.country) >= 0) {\n              parsedCountry = phoneNumber.country;\n            }\n          }\n\n          return _extends({}, new_state, {\n            parsed_input: generateParsedInput(new_value, phoneNumber, props),\n            value: new_value,\n            country: new_value ? parsedCountry : country\n          });\n        } // `country` didn't change.\n      // `value` didn't change.\n      // `parsed_input` didn't change, because `value` didn't change.\n      //\n      // Maybe `new_state.country_select_options` changed.\n      // In any case, update `prevProps`.\n\n\n      return new_state;\n    }\n  }]);\n\n  return PhoneNumberInput;\n}(PureComponent), _class2.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: _propTypes2.default.string,\n\n  /**\r\n   * Updates the `value` as the user inputs the phone number.\r\n   */\n  onChange: _propTypes2.default.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: _propTypes2.default.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: _propTypes2.default.func,\n\n  /**\r\n   * `onKeyDown` handler (e.g. to handle Enter key press).\r\n   * @ignore\r\n   */\n  onKeyDown: _propTypes2.default.func,\n\n  /**\r\n   * Disables both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  // (is `false` by default)\n  disabled: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: _propTypes2.default.string.isRequired,\n\n  /**\r\n   * Set to `true` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if this flag is set to `true`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, this flag is set to `false`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `false` by default)\n  displayInitialValueAsLocalNumber: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: _propTypes2.default.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: _PropTypes.labels.isRequired,\n\n  /**\r\n   * The base URL path for country flag icons.\r\n   * By default it loads country flag icons from\r\n   * `flag-icon-css` repo github pages website.\r\n   * I imagine someone might want to download\r\n   * those country flag icons and host them\r\n   * on their own servers instead.\r\n   * Warning: in future new countries can be added\r\n   * to the country select which would result in\r\n   * \"Image not found\" errors when using custom `flagsPath`\r\n   * due to the custom-hosted flags bundle being outdated\r\n   * and missing the new flags.\r\n   * So if using custom `flagsPath` always check `CHANGELOG.md`\r\n   * for new country announcements before updating this library.\r\n   */\n  flagsPath: _propTypes2.default.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags replace the default ones.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": () => <img src=\"...\"/> }`\r\n   *\r\n   * Can be used to replace the default flags\r\n   * with custom ones for certain (or all) countries.\r\n   *\r\n   * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n   *\r\n   * By default flag icons are inserted as `<img/>`s\r\n   * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n   *\r\n   * There might be some cases\r\n   * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n   * when including the full set of `<svg/>` country flags (3 megabytes)\r\n   * is more appropriate than downloading them individually at runtime only if needed.\r\n   *\r\n   * Example:\r\n   *\r\n   * `// Uses <svg/> flags (3 megabytes):`\r\n   *\r\n   * `import flags from 'react-phone-number-input/flags'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: _propTypes2.default.objectOf(_propTypes2.default.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * country : string — The country code.\r\n   * * flagsPath : string — The `flagsPath` property (see above).\r\n   * * flags : object — The `flags` property (see above).\r\n   */\n  flagComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n   */\n  international: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Custom \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to hide country `<select/>`.\r\n   */\n  // (is `true` by default)\n  showCountrySelect: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * HTML `tabindex` attribute for country `<select/>`.\r\n   */\n  countrySelectTabIndex: _propTypes2.default.number,\n\n  /**\r\n   * HTML `aria-label` attribute for country `<select/>`.\r\n   * The default is `.country` of the `labels` property\r\n   * which is `\"Country\"` for the default `labels`.\r\n   */\n  countrySelectAriaLabel: _propTypes2.default.string,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptions: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: _propTypes2.default.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: _propTypes2.default.string,\n\n  /**\r\n   * Phone number `<input/>` CSS class.\r\n   */\n  inputClassName: _propTypes2.default.string,\n\n  /**\r\n   * Returns phone number `<input/>` CSS class string.\r\n   * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n   * @ignore\r\n   */\n  getInputClassName: _propTypes2.default.func,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name : string?` — HTML `name` attribute.\r\n   * * `value : string?` — The currently selected country code.\r\n   * * `onChange(value : string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n   * * `disabled : boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className : string` — CSS class name.\r\n   */\n  //\n  // (deprecated)\n  // * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n  // * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n  //\n  countrySelectComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   */\n  countrySelectProps: _propTypes2.default.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur(event: Event)` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  numberInputComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: _propTypes2.default.object,\n\n  /**\r\n   * Phone number `<input/>` component (a higher-order one).\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n   * * `onChange(value? : string)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n   * * `metadata : object` — `libphonenumber-js` metadata.\r\n   * * `inputComponent : elementType` — Phone number `<input/>` component. This is basically the `numberInputComponent` property renamed to `inputComponent`.\r\n   * * All other properties should be passed through to the underlying `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   *\r\n   * @ignore\r\n   */\n  inputComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to use `inputComponent={InputBasic}`\r\n   * instead of `input-format`'s `<ReactInput/>`.\r\n   */\n  // Is `false` by default.\n  // smartCaret : PropTypes.bool.isRequired,\n\n  /**\r\n   * Phone number extension `<input/>` element.\r\n   *\r\n   * Example:\r\n   *\r\n   *\t`ext={<input value={...} onChange={...}/>}`\r\n   */\n  ext: _propTypes2.default.node,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n   */\n  error: _propTypes2.default.string,\n\n  /**\r\n   * The `error` is shown only when `indicateInvalid` is `true`.\r\n   * (which is the default).\r\n   * @deprecated\r\n   * @ignore\r\n   */\n  indicateInvalid: _propTypes2.default.bool,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: _PropTypes.metadata.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: _propTypes2.default.func,\n\n  /**\r\n   * Disables only the phone number `<input/>`.\r\n   *\r\n   * Some users choose to implement a digital keyboard component for phone number input.\r\n   * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n   * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n   */\n  // (is `false` by default)\n  // https://github.com/catamphetamine/react-phone-number-input/issues/215\n  disablePhoneInput: _propTypes2.default.bool.isRequired\n}, _class2.defaultProps = {\n  /**\r\n   * Not disabled.\r\n   */\n  disabled: false,\n  disablePhoneInput: false,\n\n  /**\r\n   * Show `error` (if passed).\r\n   * @deprecated\r\n   */\n  indicateInvalid: true,\n\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: _Flag2.default,\n\n  /**\r\n   * By default, use icons from `flag-icon-css` github repo.\r\n   */\n  flagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon (globe).\r\n   */\n  // internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  numberInputComponent: 'input',\n\n  /**\r\n   * Phone number `<input/>` component (a higher-order one).\r\n   */\n  inputComponent: _InputBasic2.default,\n\n  /**\r\n   * Show country `<select/>`.\r\n   */\n  showCountrySelect: true,\n\n  /**\r\n   * Don't convert the initially passed phone number `value`\r\n   * to a national phone number for its country.\r\n   * The reason is that the newer generation grows up when\r\n   * there are no stationary phones and therefore everyone inputs\r\n   * phone numbers with a `+` in their smartphones\r\n   * so phone numbers written in international form\r\n   * are gradually being considered more natural than local ones.\r\n   */\n  displayInitialValueAsLocalNumber: false,\n\n  /**\r\n   * Set to `false` to use `inputComponent={InputBasic}`\r\n   * instead of `input-format`'s `<ReactInput/>`.\r\n   * Is `false` by default.\r\n   */\n  // smartCaret : false,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  international: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.isCountrySupportedWithError = function (country) {\n    var metadata = _this2.props.metadata;\n    return isCountrySupportedWithError(country, metadata);\n  };\n\n  this.onCountryChange = function (new_country) {\n    var _props2 = _this2.props,\n        metadata = _props2.metadata,\n        onChange = _props2.onChange;\n    var _state2 = _this2.state,\n        old_parsed_input = _state2.parsed_input,\n        old_country = _state2.country; // After the new `country` has been selected,\n    // if the phone number `<input/>` holds any digits\n    // then migrate those digits for the new `country`.\n\n    var new_parsed_input = (0, _inputControl.migrateParsedInputForNewCountry)(old_parsed_input, old_country, new_country, metadata, // Convert to \"local\" phone number format.\n    true);\n    var new_value = (0, _inputControl.e164)(new_parsed_input, new_country, metadata); // Focus phone number `<input/>` upon country selection.\n\n    _this2.focus(); // If the user has already manually selected a country\n    // then don't override that already selected country\n    // if the default `country` property changes.\n    // That's what `hasUserSelectedACountry` flag is for.\n\n\n    _this2.setState({\n      country: new_country,\n      hasUserSelectedACountry: true,\n      parsed_input: new_parsed_input,\n      value: new_value\n    }, function () {\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      onChange(new_value);\n    });\n  };\n\n  this.onPhoneNumberKeyDown = function (event) {\n    var onKeyDown = _this2.props.onKeyDown; // Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n    // (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n    // so can't hijack \"Down arrow\" keypress here.\n    // // Expand country `<select/>`` on \"Down arrow\" key press.\n    // if (event.keyCode === 40) {\n    // \tthis.country_select.toggle()\n    // }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  this.onChange = function (_input) {\n    var _props3 = _this2.props,\n        onChange = _props3.onChange,\n        international = _props3.international,\n        limitMaxLength = _props3.limitMaxLength,\n        metadata = _props3.metadata;\n\n    var _parseInput = (0, _inputControl.parseInput)(_input, _this2.state.parsed_input, _this2.state.country, _this2.state.countries, international, limitMaxLength, metadata),\n        input = _parseInput.input,\n        country = _parseInput.country,\n        value = _parseInput.value;\n\n    _this2.setState({\n      parsed_input: input,\n      value: value,\n      country: country\n    }, // Update the new `value` property.\n    // Doing it after the `state` has been updated\n    // because `onChange()` will trigger `getDerivedStateFromProps()`\n    // with the new `value` which will be compared to `state.value` there.\n    function () {\n      return onChange(value);\n    });\n  };\n\n  this._onFocus = function () {\n    return _this2.setState({\n      isFocused: true\n    });\n  };\n\n  this._onBlur = function () {\n    return _this2.setState({\n      isFocused: false\n    });\n  };\n\n  this.onFocus = function (event) {\n    var onFocus = _this2.props.onFocus;\n\n    _this2._onFocus();\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  this.onBlur = function (event) {\n    var onBlur = _this2.props.onBlur;\n    var value = _this2.state.value;\n\n    _this2._onBlur();\n\n    if (!onBlur) {\n      return;\n    } // `event` is React's `SyntheticEvent`.\n    // Its `.value` is read-only therefore cloning it.\n\n\n    var _event = _extends({}, event, {\n      target: _extends({}, event.target, {\n        value: value\n      }) // For `redux-form` event detection.\n      // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n    });\n\n    _event.stopPropagation = event.stopPropagation;\n    _event.preventDefault = event.preventDefault;\n    return onBlur(_event);\n  };\n\n  this.hidePhoneInputField = function (hide) {\n    _this2.setState({\n      hidePhoneInputField: hide\n    });\n  };\n\n  this.focus = function () {\n    return _this2.number_input.focus();\n  };\n\n  this.storeCountrySelectInstance = function (_) {\n    return _this2.country_select = _;\n  };\n\n  this.storePhoneNumberInputInstance = function (_) {\n    return _this2.number_input = _;\n  };\n}, _temp)) || _class; // Generates country `<select/>` options.\n\n\nexports.default = PhoneNumberInput;\n\nfunction generateCountrySelectOptions(countries, countryOptions, props) {\n  var labels = props.labels,\n      international = props.international,\n      metadata = props.metadata;\n  var CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props);\n  return transformCountryOptions((0, _inputControl.getCountrySelectOptions)(countries || (0, _countries2.getCountryCodes)(labels).filter(function (country) {\n    return country === 'ZZ' || isCountrySupported(country, metadata);\n  }), labels, international).map(function (_ref) {\n    var value = _ref.value,\n        label = _ref.label;\n    return {\n      value: value,\n      label: label,\n      icon: CountrySelectOptionIcon\n    };\n  }), countryOptions);\n}\n\nfunction createCountrySelectOptionIconComponent(props) {\n  var flags = props.flags,\n      flagsPath = props.flagsPath,\n      FlagComponent = props.flagComponent,\n      InternationalIcon = props.internationalIcon;\n  return function (_ref2) {\n    var value = _ref2.value;\n    return _react2.default.createElement('div', {\n      className: (0, _classnames2.default)('react-phone-number-input__icon', {\n        'react-phone-number-input__icon--international': value === undefined\n      })\n    }, value ? _react2.default.createElement(FlagComponent, {\n      country: value,\n      flags: flags,\n      flagsPath: flagsPath\n    }) : _react2.default.createElement(InternationalIcon, null));\n  };\n} // Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\n\n\nfunction transformCountryOptions(options, transform) {\n  if (!transform) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  var _loop = function _loop() {\n    if (_isArray) {\n      if (_i >= _iterator.length) return 'break';\n      _ref3 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) return 'break';\n      _ref3 = _i.value;\n    }\n\n    var element = _ref3;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      var index = options.indexOf(options.filter(function (option) {\n        return option.value === element;\n      })[0]); // Get the option.\n\n      var option = options[index]; // Remove the option from its default position.\n\n      options.splice(index, 1); // Add the option on top.\n\n      appendTo.push(option);\n    }\n  };\n\n  for (var _iterator = transform, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref3;\n\n    var _ret = _loop();\n\n    if (_ret === 'break') break;\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\n\nfunction generateParsedInput(value, phoneNumber, props) {\n  var displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n    return (0, _inputControl.generateNationalNumberDigits)(phoneNumber);\n  }\n\n  return value;\n}\n\nfunction isCountrySupported(country, metadata) {\n  return metadata.countries.hasOwnProperty(country);\n}\n\nfunction isCountrySupportedWithError(country, metadata) {\n  if (isCountrySupported(country, metadata)) {\n    return true;\n  } else {\n    console.error('Country not found: ' + country);\n    return false;\n  }\n}\n\nfunction isCountryOptionSupportedWithError(countryOption, metadata) {\n  switch (countryOption) {\n    case '|':\n    case '...':\n    case '…':\n      return true;\n\n    default:\n      return isCountrySupportedWithError(countryOption, metadata);\n  }\n}\n\nfunction filterCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}\n\nfunction filterCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (countryOption) {\n      return isCountryOptionSupportedWithError(countryOption, metadata);\n    });\n\n    if (countryOptions.length === 0) {\n      countryOptions = undefined;\n    }\n  }\n\n  return countryOptions;\n}\n\nfunction parseExtDigits(event) {\n  if (event) {\n    if (typeof event === 'string') {\n      event = (0, _core.parseDigits)(event);\n    } else if (event.target && event.target.value) {\n      event.target.value = (0, _core.parseDigits)(event.target.value);\n    }\n  }\n\n  return event;\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // https://stackoverflow.com/a/46971044/970769\n\n\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var regular_expression = arguments[1];\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\n\nexport function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b)\n  // {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    this.v1 = !metadata.version;\n    this.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n    this.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n  }\n\n  _createClass(Metadata, [{\n    key: 'getCountries',\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries);\n    }\n  }, {\n    key: 'hasCountry',\n    value: function hasCountry(country) {\n      return this.metadata.countries[country] !== undefined;\n    }\n  }, {\n    key: 'country',\n    value: function country(_country) {\n      if (!_country) {\n        this._country = undefined;\n        this.country_metadata = undefined;\n        return this;\n      }\n\n      if (!this.hasCountry(_country)) {\n        throw new Error('Unknown country: ' + _country);\n      }\n\n      this._country = _country;\n      this.country_metadata = this.metadata.countries[_country];\n      return this;\n    }\n  }, {\n    key: 'getDefaultCountryMetadataForRegion',\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n    }\n  }, {\n    key: 'countryCallingCode',\n    value: function countryCallingCode() {\n      return this.country_metadata[0];\n    }\n  }, {\n    key: 'IDDPrefix',\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.country_metadata[1];\n    }\n  }, {\n    key: 'defaultIDDPrefix',\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.country_metadata[12];\n    }\n  }, {\n    key: 'nationalNumberPattern',\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.country_metadata[1];\n      return this.country_metadata[2];\n    }\n  }, {\n    key: 'possibleLengths',\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.country_metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: '_getFormats',\n    value: function _getFormats(country_metadata) {\n      return country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'formats',\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: 'nationalPrefix',\n    value: function nationalPrefix() {\n      return this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: '_getNationalPrefixFormattingRule',\n    value: function _getNationalPrefixFormattingRule(country_metadata) {\n      return country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'nationalPrefixFormattingRule',\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: 'nationalPrefixForParsing',\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n    }\n  }, {\n    key: 'nationalPrefixTransformRule',\n    value: function nationalPrefixTransformRule() {\n      return this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: '_getNationalPrefixIsOptionalWhenFormatting',\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when parsing\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'nationalPrefixIsOptionalWhenFormatting',\n    value: function nationalPrefixIsOptionalWhenFormatting() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: 'leadingDigits',\n    value: function leadingDigits() {\n      return this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: 'types',\n    value: function types() {\n      return this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: 'hasTypes',\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: 'type',\n    value: function type(_type) {\n      if (this.hasTypes() && getType(this.types(), _type)) {\n        return new Type(getType(this.types(), _type), this);\n      }\n    }\n  }, {\n    key: 'ext',\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }, {\n    key: 'countryCallingCodes',\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n    //\n    // `country_calling_code` is always valid.\n    // But the actual country may not necessarily be part of the metadata.\n    //\n\n  }, {\n    key: 'chooseCountryByCountryCallingCode',\n    value: function chooseCountryByCountryCallingCode(country_calling_code) {\n      var country = this.countryCallingCodes()[country_calling_code][0]; // Do not want to test this case.\n      // (custom metadata, not all countries).\n\n      /* istanbul ignore else */\n\n      if (this.hasCountry(country)) {\n        this.country(country);\n      }\n    }\n  }, {\n    key: 'selectedCountry',\n    value: function selectedCountry() {\n      return this._country;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: 'pattern',\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: 'format',\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: 'leadingDigitsPatterns',\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: 'nationalPrefixFormattingRule',\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: 'nationalPrefixIsOptionalWhenFormatting',\n    value: function nationalPrefixIsOptionalWhenFormatting() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n    }\n  }, {\n    key: 'nationalPrefixIsMandatoryWhenFormatting',\n    value: function nationalPrefixIsMandatoryWhenFormatting() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: 'usesNationalPrefix',\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a dummy one.\n      this.nationalPrefixFormattingRule() !== '$1' && // Check that national prefix formatting rule actually has national prefix digit(s).\n      /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n    }\n  }, {\n    key: 'internationalFormat',\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n\nvar Type = function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: 'pattern',\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: 'possibleLengths',\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n    throw new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error('Unknown country: ' + country);\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nexport default function cmp(a, b) {\n  var pa = a.split('.');\n  var pb = b.split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  return 0;\n}\n;","import { VALID_DIGITS } from './constants'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext='; // Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\n\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\nfunction create_extension_pattern(purpose) {\n  // One-character symbols that can be used to indicate an extension.\n  var single_extension_characters = \"x\\uFF58#\\uFF03~\\uFF5E\";\n\n  switch (purpose) {\n    // For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n    // allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n    case 'parsing':\n      single_extension_characters = ',;' + single_extension_characters;\n  }\n\n  return RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\" + // \"доб.\"\n  \"\\u0434\\u043E\\u0431|\" + '[' + single_extension_characters + \"]|int|anexo|\\uFF49\\uFF4E\\uFF54)\" + \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\" + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\n\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching'); // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var number_without_extension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i] != null && matches[i].length > 0) {\n      return {\n        number: number_without_extension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}","import { parseDigit } from './parseDigits';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, value) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (value) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2]; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n  metadata.country(input.country); // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _type = _ref;\n\n    if (is_of_type(nationalNumber, _type, metadata)) {\n      return _type;\n    }\n  }\n}\nexport function is_of_type(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n} // Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographical entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths)\n      // {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // }\n      // else\n      // {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\nexport default function isPossibleNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error('Unknown country: ' + input.country);\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n    }\n  }\n\n  if (!metadata.possibleLengths()) {\n    throw new Error('Metadata too old');\n  }\n\n  return is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\nexport function is_possible_number(national_number, is_international, metadata) {\n  switch (checkNumberLengthForType(national_number, undefined, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !is_international\n\n    default:\n      return false;\n  }\n}","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport function getIDDPrefix(country, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.country(country);\n\n  if (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n\n  return countryMetadata.defaultIDDPrefix();\n}\nexport function stripIDDPrefix(number, country, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.country(country);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // Some kind of a weird edge case.\n  // No explanation from Google given.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  /* istanbul ignore next */\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}","var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number = void 0;\n  var ext = void 0; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n  }\n\n  return 'tel:' + number + (ext ? ';ext=' + ext : '');\n}","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\nvar defaultOptions = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return '' + formattedNumber + metadata.ext() + extension;\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _extends({}, defaultOptions, options);\n  } else {\n    options = defaultOptions;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country) {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error('Unknown country: ' + input.country);\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number = void 0;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = format_national_number(nationalNumber, 'NATIONAL', metadata);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '+' + countryCallingCode;\n      }\n\n      number = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n      number = '+' + countryCallingCode + ' ' + number;\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return '+' + countryCallingCode + nationalNumber;\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: '+' + countryCallingCode + nationalNumber,\n        ext: input.ext\n      });\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\n      if (!IDDPrefix) {\n        return;\n      }\n\n      if (options.humanReadable) {\n        var formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\n        if (formattedForSameCountryCallingCode) {\n          number = formattedForSameCountryCallingCode;\n        } else {\n          number = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n        }\n\n        return addExtension(number, input.ext, metadata, options.formatExtension);\n      }\n\n      return '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n    default:\n      throw new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n  }\n} // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return changeInternationalFormatStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n  var format = choose_format_for_number(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n  for (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref; // Validate leading digits\n\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (national_number.search(last_leading_digits_pattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(national_number, format.pattern())) {\n      return format;\n    }\n  }\n} // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport function changeInternationalFormatStyle(local) {\n  return local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n  var fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n  fromCountryMetadata.country(fromCountry); // If calling within the same country calling code.\n\n  if (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n    // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n    if (toCountryCallingCode === '1') {\n      return toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return format_national_number(number, 'NATIONAL', toCountryMetadata);\n  }\n}","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    } // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      var _metadata = new Metadata(metadata);\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: 'isPossible',\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'isValid',\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: 'getType',\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'format',\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _extends({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'formatNational',\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: 'formatInternational',\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: 'getURI',\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$'); // `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error('Unknown country: ' + options.defaultCountry);\n  } // Parse the phone number.\n\n\n  var _parse_input = parse_input(text, options.v2),\n      formatted_phone_number = _parse_input.number,\n      ext = _parse_input.ext; // If the phone number is not viable then return nothing.\n\n\n  if (!formatted_phone_number) {\n    if (options.v2) {\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parse_phone_number = parse_phone_number(formatted_phone_number, options.defaultCountry, metadata),\n      country = _parse_phone_number.country,\n      nationalNumber = _parse_phone_number.national_number,\n      countryCallingCode = _parse_phone_number.countryCallingCode,\n      carrierCode = _parse_phone_number.carrierCode;\n\n  if (!metadata.selectedCountry()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\n\nexport function extract_formatted_phone_number(text, v2) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (v2) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (starts_at < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(starts_at) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n} // Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\n\nexport function strip_national_prefix_and_carrier_code(number, metadata) {\n  if (!number || !metadata.nationalPrefixForParsing()) {\n    return {\n      number: number\n    };\n  } // In many countries the national prefix\n  // is not just a constant digit (like `0` in UK)\n  // but can be different depending on the phone number\n  // (and can be also absent for some phone numbers).\n  //\n  // So `national_prefix_for_parsing` is used when parsing\n  // a national-prefixed (local) phone number\n  // into a national significant phone number\n  // extracting that possible national prefix out of it.\n  //\n  // Example `national_prefix_for_parsing` for Australia (AU) is `0|(183[12])`.\n  // Which means that in Australia the national prefix can be: `0`, `1831`, `1832`.\n  // Attempt to parse the first digits as a national prefix\n\n\n  var national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n  var national_prefix_matcher = national_prefix_pattern.exec(number); // If no national prefix is present in the phone number,\n  // but the national prefix is optional for this country,\n  // then consider this phone number valid.\n  //\n  // Google's reference `libphonenumber` implementation\n  // wouldn't recognize such phone numbers as valid,\n  // but I think it would perfectly make sense\n  // to consider such phone numbers as valid\n  // because if a national phone number was originally\n  // formatted without the national prefix\n  // then it must be parseable back into the original national number.\n  // In other words, `parse(format(number))`\n  // must always be equal to `number`.\n  //\n\n  if (!national_prefix_matcher) {\n    return {\n      number: number\n    };\n  }\n\n  var national_significant_number = void 0; // In more complex cases just `national_prefix_for_parsing` regexp\n  // is not enough to extract the national number and then strip it\n  // like `number.slice(national_prefix.length)` because when parsing\n  // national numbers it's not always clear whether the first digits\n  // are a national prefix or part of the national significant number.\n  // For such cases `national_prefix_transform_rule` regexp is present\n  // which contains \"capturing groups\" that are later used in such\n  // `national_prefix_transform_rule` to transform the national number\n  // being parsed into the national significant number.\n  //\n  // Example.\n  // Country: U.S. Virgin Islands (VI).\n  // Country calling code: +1.\n  // Leading digits: 340.\n  // Phone number format: +1 (340) xxx-xxxx.\n  // National prefix: 1.\n  // National prefix for parsing: 1|([2-9]\\d{6})$.\n  // National prefix transform rule: 340$1.\n  //\n  // So for input \"13401234567\" \"national prefix for parsing\" regexp\n  // will return \"1\" and the national significant number will be\n  // \"13401234567\".slice(\"1\".length) === \"(340) 123-4567\".\n  //\n  // And for input \"3401234567\" \"national prefix for parsing\" regexp\n  // the \"captured group\" will be \"3401234567\" and the national significant\n  // number will be \"3401234567\".replace(\"340123\", \"340340123\") === \"(340) 3401234567\".\n  //\n  // `national_prefix_matcher[captured_groups_count]` means that\n  // the corresponding \"captured group\" is not empty.\n  // It can be empty if the regexp either doesn't have any \"capturing groups\"\n  // or if the \"capturing groups\" are defined as optional.\n  // Example: \"0?(?:...)?\" for Argentina.\n  //\n\n  var captured_groups_count = national_prefix_matcher.length - 1;\n\n  if (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n    national_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n  } // If it's a simple-enough case then just strip the national prefix from the number.\n  else {\n      // National prefix is the whole substring matched by\n      // the `national_prefix_for_parsing` regexp.\n      var national_prefix = national_prefix_matcher[0];\n      national_significant_number = number.slice(national_prefix.length);\n    }\n\n  var carrierCode = void 0;\n\n  if (captured_groups_count > 0) {\n    carrierCode = national_prefix_matcher[1];\n  } // The following is done in `get_country_and_national_number_for_local_number()` instead.\n  //\n  // // Verify the parsed national (significant) number for this country\n  // const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n  // //\n  // // If the original number (before stripping national prefix) was viable,\n  // // and the resultant number is not, then prefer the original phone number.\n  // // This is because for some countries (e.g. Russia) the same digit could be both\n  // // a national prefix and a leading digit of a valid national phone number,\n  // // like `8` is the national prefix for Russia and both\n  // // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n  // if (matchesEntirely(number, national_number_rule) &&\n  // \t\t!matchesEntirely(national_significant_number, national_number_rule))\n  // {\n  // \treturn number\n  // }\n  // Return the parsed national (significant) number\n\n\n  return {\n    number: national_significant_number,\n    carrierCode: carrierCode\n  };\n}\nexport function find_country_code(country_calling_code, national_phone_number, metadata) {\n  // Is always non-empty, because `country_calling_code` is always valid\n  var possible_countries = metadata.countryCallingCodes()[country_calling_code]; // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n  if (possible_countries.length === 1) {\n    return possible_countries[0];\n  }\n\n  return _find_country_code(possible_countries, national_phone_number, metadata.metadata);\n} // Changes `metadata` `country`.\n\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possible_countries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: national_phone_number,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parse_input(text, v2) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extract_formatted_phone_number(text, v2); // If the phone number is not viable, then abort.\n\n  if (!number || !isViablePhoneNumber(number)) {\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var with_extension_stripped = extractExtension(number);\n\n  if (with_extension_stripped.ext) {\n    return with_extension_stripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, national_number, ext) {\n  var result = {\n    country: country,\n    phone: national_number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\n\n\nfunction parse_phone_number(formatted_phone_number, default_country, metadata) {\n  var _extractCountryCallin = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number;\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var country = void 0;\n\n  if (countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n  } else if (default_country) {\n    metadata.country(default_country);\n    country = default_country;\n    countryCallingCode = getCountryCallingCode(default_country, metadata.metadata);\n  } else return {};\n\n  var _parse_national_numbe = parse_national_number(number, metadata),\n      national_number = _parse_national_numbe.national_number,\n      carrier_code = _parse_national_numbe.carrier_code; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = find_country_code(countryCallingCode, national_number, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    metadata.country(country);\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    national_number: national_number,\n    carrierCode: carrier_code\n  };\n}\n\nfunction parse_national_number(number, metadata) {\n  var national_number = parseIncompletePhoneNumber(number);\n  var carrier_code = void 0; // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n  var _strip_national_prefi = strip_national_prefix_and_carrier_code(national_number, metadata),\n      potential_national_number = _strip_national_prefi.number,\n      carrierCode = _strip_national_prefi.carrierCode; // If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n  if (metadata.possibleLengths()) {\n    // We require that the NSN remaining after stripping the national prefix and\n    // carrier code be long enough to be a possible length for the region.\n    // Otherwise, we don't do the stripping, since the original number could be\n    // a valid short number.\n    switch (checkNumberLengthForType(potential_national_number, undefined, metadata)) {\n      case 'TOO_SHORT': // case 'IS_POSSIBLE_LOCAL_ONLY':\n\n      case 'INVALID_LENGTH':\n        break;\n\n      default:\n        national_number = potential_national_number;\n        carrier_code = carrierCode;\n    }\n  } else {\n    // If the original number (before stripping national prefix) was viable,\n    // and the resultant number is not, then prefer the original phone number.\n    // This is because for some countries (e.g. Russia) the same digit could be both\n    // a national prefix and a leading digit of a valid national phone number,\n    // like `8` is the national prefix for Russia and both\n    // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n    if (matchesEntirely(national_number, metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, metadata.nationalNumberPattern())) {// Keep the number without stripping national prefix.\n    } else {\n      national_number = potential_national_number;\n      carrier_code = carrierCode;\n    }\n  }\n\n  return {\n    national_number: national_number,\n    carrier_code: carrier_code\n  };\n} // Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parse_phone_number(number, null, metadata).country\n// }\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\n\n\nexport function extractCountryCallingCode(number, country, metadata) {\n  number = parseIncompletePhoneNumber(number);\n\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then don't extract country phone code.\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIDDPrefix(number, country, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var countryCallingCode = number.slice(1, i);\n\n    if (metadata.countryCallingCodes()[countryCallingCode]) {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport parseNumber from './parse_';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _extends({}, options, {\n    v2: true\n  }), metadata);\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text = void 0;\n  var options = void 0;\n  var metadata = void 0; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _extends({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error('Invalid second argument: ' + arg_2);\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _extends({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\n\n\nvar Node = function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n};\n\nvar LRUCache = function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  } // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      } //Update the cache map\n\n\n      this.cache[key] = this.head;\n      this.size++;\n    } // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value; // node removed from it's position and cache\n\n        this.remove(key); // write node again to the head of LinkedList to make it most recently used\n\n        this.put(key, value);\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \" + key);\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    } // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexport default LRUCache;","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport LRUCache from './LRUCache'; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\n\nvar RegExpCache = function () {\n  function RegExpCache(size) {\n    _classCallCheck(this, RegExpCache);\n\n    this.cache = new LRUCache(size);\n  }\n\n  _createClass(RegExpCache, [{\n    key: 'getPatternForRegExp',\n    value: function getPatternForRegExp(pattern) {\n      var regExp = this.cache.get(pattern);\n\n      if (!regExp) {\n        regExp = new RegExp('^' + pattern);\n        this.cache.put(pattern, regExp);\n      }\n\n      return regExp;\n    }\n  }]);\n\n  return RegExpCache;\n}();\n\nexport default RegExpCache;","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\" + lower + \",\" + upper + \"}\";\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\nvar _pZ = \" \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\";\nexport var pZ = '[' + _pZ + ']';\nexport var PZ = '[^' + _pZ + ']';\nexport var _pN = \"0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\"; // const pN = `[${_pN}]`\n\nvar _pNd = \"0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\";\nexport var pNd = '[' + _pNd + ']';\nexport var _pL = \"A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar pL = '[' + _pL + ']';\nvar pL_regexp = new RegExp(pL);\nvar _pSc = \"$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6\";\nvar pSc = '[' + _pSc + ']';\nvar pSc_regexp = new RegExp(pSc);\nvar _pMn = \"\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\";\nvar pMn = '[' + _pMn + ']';\nvar pMn_regexp = new RegExp(pMn);\nvar _InBasic_Latin = '\\0-\\x7F';\nvar _InLatin_1_Supplement = '\\x80-\\xFF';\nvar _InLatin_Extended_A = \"\\u0100-\\u017F\";\nvar _InLatin_Extended_Additional = \"\\u1E00-\\u1EFF\";\nvar _InLatin_Extended_B = \"\\u0180-\\u024F\";\nvar _InCombining_Diacritical_Marks = \"\\u0300-\\u036F\";\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\n\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}","import isValidNumber from '../validate_';\nimport parseDigits from '../parseDigits';\nimport { startsWith, endsWith } from './util';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n\n  if (metadata == null) {\n    return true;\n  } // Check if a national prefix should be present when formatting this number.\n\n\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    } // Normalize the remainder.\n\n\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}","import { trimAfterFirstMatch } from './util'; // Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\n\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\nexport default function parsePreCandidate(candidate) {\n  // Check for extra numbers at the end.\n  // TODO: This is the place to start when trying to support extraction of multiple phone number\n  // from split notations (+41 79 123 45 67 / 68).\n  return trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/; // Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\n\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\nexport default function isValidPreCandidate(candidate, offset, text) {\n  // Skip a match that is more likely to be a date.\n  if (SLASH_SEPARATED_DATES.test(candidate)) {\n    return false;\n  } // Skip potential time-stamps.\n\n\n  if (TIME_STAMPS.test(candidate)) {\n    var followingText = text.slice(offset + candidate.length);\n\n    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n      return false;\n    }\n  }\n\n  return true;\n}","// Copy-pasted from `PhoneNumberMatcher.js`.\nimport { PLUS_CHARS } from '../constants';\nimport { limit } from './util';\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8';\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = '[^' + OPENING_PARENS + CLOSING_PARENS + ']';\nexport var LEAD_CLASS = '[' + OPENING_PARENS + PLUS_CHARS + ']'; // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n        return false;\n      }\n    }\n\n    var lastCharIndex = offset + candidate.length;\n\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n\n      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\n\n\nimport PhoneNumber from './PhoneNumber';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants';\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension';\nimport RegExpCache from './findNumbers/RegExpCache';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8';\nimport Leniency from './findNumbers/Leniency';\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate';\nimport { isSupportedCountry } from './metadata';\nimport parseNumber from './parse_';\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n'(?:' + pZ + '-|-' + pZ + ')' + pZ + '*(.+)', // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\" + pZ + '*(.+)', // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n'\\\\.+' + pZ + '*([^.]+)', // Breaks on space - e.g. \"3324451234 8002341234\"\npZ + '+(' + PZ + '+)']; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = '[' + VALID_PUNCTUATION + ']' + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp('[^' + _pN + _pL + '#]+$');\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = function () {\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments[2];\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    this.state = 'NOT_READY';\n    this.searchIndex = 0;\n    this.regExpCache = new RegExpCache(32);\n    options = _extends({}, options, {\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError('Unknown leniency: ' + options.leniency + '.');\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n  // that use-case won't have a lot of benefit.\n\n  /** The iteration tristate. */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: 'find',\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches = void 0;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: 'extractInnerMatch',\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _iterator = INNER_MATCHES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var innerMatchPattern = _ref;\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: 'parseAndVerify',\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          country: number.country,\n          phone: number.phone\n        };\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: 'hasNext',\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport default PhoneNumberMatcher;","import _findNumbers from './findNumbers_';\nimport { normalizeArguments } from './parsePhoneNumber';\nexport default function findNumbers() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return _findNumbers(text, options, metadata);\n}","import PhoneNumberMatcher from './PhoneNumberMatcher';\nexport default function findNumbers(text, options, metadata) {\n  var matcher = new PhoneNumberMatcher(text, options, metadata);\n  var results = [];\n\n  while (matcher.hasNext()) {\n    results.push(matcher.next());\n  }\n\n  return results;\n}","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport PhoneNumberMatcher from './PhoneNumberMatcher';\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\nexport default function searchNumbers() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  var matcher = new PhoneNumberMatcher(text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (matcher.hasNext()) {\n          return {\n            done: false,\n            value: matcher.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\n\nimport Metadata from './metadata';\nimport PhoneNumber from './PhoneNumber';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { matchesEntirely } from './util';\nimport { extractCountryCallingCode as _extractCountryCallingCode, extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse_';\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, changeInternationalFormatStyle } from './format_';\nimport { checkNumberLengthForType } from './getNumberType_';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\n\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\n\n\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n  /**\r\n   * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(defaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.options = {};\n    this.metadata = new Metadata(metadata);\n\n    if (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n      this.defaultCountry = defaultCountry;\n    }\n\n    this.reset();\n  } // Not setting `options` to a constructor argument\n  // not to break backwards compatibility\n  // for older versions of the library.\n\n\n  _createClass(AsYouType, [{\n    key: 'input',\n    value: function input(text) {\n      // Parse input\n      var extracted_number = extract_formatted_phone_number(text) || ''; // Special case for a lone '+' sign\n      // since it's not considered a possible phone number.\n\n      if (!extracted_number) {\n        if (text && text.indexOf('+') >= 0) {\n          extracted_number = '+';\n        }\n      } // Validate possible first part of a phone number\n\n\n      if (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n        return this.currentOutput;\n      }\n\n      return this.processInput(parseIncompletePhoneNumber(extracted_number));\n    }\n  }, {\n    key: 'processInput',\n    value: function processInput(input) {\n      // If an out of position '+' sign detected\n      // (or a second '+' sign),\n      // then just drop it from the input.\n      if (input[0] === '+') {\n        if (!this.parsedInput) {\n          this.parsedInput += '+'; // If a default country was set\n          // then reset it because an explicitly international\n          // phone number is being entered\n\n          this.resetCountriness();\n        }\n\n        input = input.slice(1);\n      } // Raw phone number\n\n\n      this.parsedInput += input; // // Reset phone number validation state\n      // this.valid = false\n      // Add digits to the national number\n\n      this.nationalNumber += input; // TODO: Deprecated: rename `this.nationalNumber`\n      // to `this.nationalNumber` and remove `.getNationalNumber()`.\n      // Try to format the parsed input\n\n      if (this.isInternational()) {\n        if (!this.countryCallingCode) {\n          // Extract country calling code from the digits entered so far.\n          // There must be some digits in order to extract anything from them.\n          if (!this.nationalNumber) {\n            // Return raw phone number\n            return this.parsedInput;\n          } // If one looks at country phone codes\n          // then he can notice that no one country phone code\n          // is ever a (leftmost) substring of another country phone code.\n          // So if a valid country code is extracted so far\n          // then it means that this is the country code.\n          // If no country phone code could be extracted so far,\n          // then just return the raw phone number,\n          // because it has no way of knowing\n          // how to format the phone number so far.\n\n\n          if (!this.extractCountryCallingCode()) {\n            // Return raw phone number\n            return this.parsedInput;\n          } // Initialize country-specific data\n\n\n          this.initialize_phone_number_formats_for_this_country_calling_code();\n          this.resetFormat();\n          this.determineTheCountry();\n        } // `this.country` could be `undefined`,\n        // for instance, when there is ambiguity\n        // in a form of several different countries\n        // each corresponding to the same country phone code\n        // (e.g. NANPA: USA, Canada, etc),\n        // and there's not enough digits entered\n        // to reliably determine the country\n        // the phone number belongs to.\n        // Therefore, in cases of such ambiguity,\n        // each time something is input,\n        // try to determine the country\n        // (if it's not determined yet).\n        else if (!this.country) {\n            this.determineTheCountry();\n          }\n      } else {\n        // Some national prefixes are substrings of other national prefixes\n        // (for the same country), therefore try to extract national prefix each time\n        // because a longer national prefix might be available at some point in time.\n        var previous_national_prefix = this.nationalPrefix;\n        this.nationalNumber = this.nationalPrefix + this.nationalNumber; // Possibly extract a national prefix\n\n        this.extractNationalPrefix();\n\n        if (this.nationalPrefix !== previous_national_prefix) {\n          // National number has changed\n          // (due to another national prefix been extracted)\n          // therefore national number has changed\n          // therefore reset all previous formatting data.\n          // (and leading digits matching state)\n          this.matching_formats = undefined;\n          this.resetFormat();\n        }\n      } // if (!this.shouldFormat())\n      // {\n      // \treturn this.format_as_non_formatted_number()\n      // }\n\n\n      if (!this.nationalNumber) {\n        return this.format_as_non_formatted_number();\n      } // Check the available phone number formats\n      // based on the currently available leading digits.\n\n\n      this.match_formats_by_leading_digits(); // Format the phone number (given the next digits)\n\n      var formatted_national_phone_number = this.formatNationalNumber(input); // If the phone number could be formatted,\n      // then return it, possibly prepending with country phone code\n      // (for international phone numbers only)\n\n      if (formatted_national_phone_number) {\n        return this.formatFullNumber(formatted_national_phone_number);\n      } // If the phone number couldn't be formatted,\n      // then just fall back to the raw phone number.\n\n\n      return this.format_as_non_formatted_number();\n    }\n  }, {\n    key: 'format_as_non_formatted_number',\n    value: function format_as_non_formatted_number() {\n      // Strip national prefix for incorrectly inputted international phones.\n      if (this.isInternational() && this.countryCallingCode) {\n        return '+' + this.countryCallingCode + this.nationalNumber;\n      }\n\n      return this.parsedInput;\n    }\n  }, {\n    key: 'formatNationalNumber',\n    value: function formatNationalNumber(next_digits) {\n      // Format the next phone number digits\n      // using the previously chosen phone number format.\n      //\n      // This is done here because if `attempt_to_format_complete_phone_number`\n      // was placed before this call then the `template`\n      // wouldn't reflect the situation correctly (and would therefore be inconsistent)\n      //\n      var national_number_formatted_with_previous_format = void 0;\n\n      if (this.chosenFormat) {\n        national_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits);\n      } // See if the input digits can be formatted properly already. If not,\n      // use the results from formatNextNationalNumberDigits(), which does formatting\n      // based on the formatting pattern chosen.\n\n\n      var formatted_number = this.attempt_to_format_complete_phone_number(); // Just because a phone number doesn't have a suitable format\n      // that doesn't mean that the phone is invalid\n      // because phone number formats only format phone numbers,\n      // they don't validate them and some (rare) phone numbers\n      // are meant to stay non-formatted.\n\n      if (formatted_number) {\n        return formatted_number;\n      } // For some phone number formats national prefix\n      // If the previously chosen phone number format\n      // didn't match the next (current) digit being input\n      // (leading digits pattern didn't match).\n\n\n      if (this.chooseAnotherFormat()) {\n        // And a more appropriate phone number format\n        // has been chosen for these `leading digits`,\n        // then format the national phone number (so far)\n        // using the newly selected phone number pattern.\n        // Will return `undefined` if it couldn't format\n        // the supplied national number\n        // using the selected phone number pattern.\n        return this.reformatNationalNumber();\n      } // If could format the next (current) digit\n      // using the previously chosen phone number format\n      // then return the formatted number so far.\n      // If no new phone number format could be chosen,\n      // and couldn't format the supplied national number\n      // using the selected phone number pattern,\n      // then it will return `undefined`.\n\n\n      return national_number_formatted_with_previous_format;\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      // Input stripped of non-phone-number characters.\n      // Can only contain a possible leading '+' sign and digits.\n      this.parsedInput = '';\n      this.currentOutput = ''; // This contains the national prefix that has been extracted. It contains only\n      // digits without formatting.\n\n      this.nationalPrefix = '';\n      this.nationalNumber = '';\n      this.carrierCode = '';\n      this.resetCountriness();\n      this.resetFormat();\n      return this;\n    }\n  }, {\n    key: 'resetCountry',\n    value: function resetCountry() {\n      if (this.isInternational()) {\n        this.country = undefined;\n      } else {\n        this.country = this.defaultCountry;\n      }\n    }\n  }, {\n    key: 'resetCountriness',\n    value: function resetCountriness() {\n      this.resetCountry();\n\n      if (this.defaultCountry && !this.isInternational()) {\n        this.metadata.country(this.defaultCountry);\n        this.countryCallingCode = this.metadata.countryCallingCode();\n        this.initialize_phone_number_formats_for_this_country_calling_code();\n      } else {\n        this.metadata.country(undefined);\n        this.countryCallingCode = undefined; // \"Available formats\" are all formats available for the country.\n        // \"Matching formats\" are only formats eligible for the national number being entered.\n\n        this.available_formats = [];\n        this.matching_formats = undefined;\n      }\n    }\n  }, {\n    key: 'resetFormat',\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.partially_populated_template = undefined;\n      this.last_match_position = -1;\n    } // Format each digit of national phone number (so far)\n    // using the newly selected phone number pattern.\n\n  }, {\n    key: 'reformatNationalNumber',\n    value: function reformatNationalNumber() {\n      // Format each digit of national phone number (so far)\n      // using the selected phone number pattern.\n      return this.formatNextNationalNumberDigits(this.nationalNumber);\n    }\n  }, {\n    key: 'initialize_phone_number_formats_for_this_country_calling_code',\n    value: function initialize_phone_number_formats_for_this_country_calling_code() {\n      // Get all \"eligible\" phone number formats for this country\n      this.available_formats = this.metadata.formats().filter(function (format) {\n        return ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n      });\n      this.matching_formats = undefined;\n    }\n  }, {\n    key: 'match_formats_by_leading_digits',\n    value: function match_formats_by_leading_digits() {\n      var leading_digits = this.nationalNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digits patterns already match for a single first digit.\n\n      var index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (index_of_leading_digits_pattern < 0) {\n        index_of_leading_digits_pattern = 0;\n      } // \"Available formats\" are all formats available for the country.\n      // \"Matching formats\" are only formats eligible for the national number being entered.\n      // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n      // then format matching starts narrowing down the list of possible formats\n      // (only previously matched formats are considered for next digits).\n\n\n      var available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n      this.had_enough_leading_digits = this.shouldFormat();\n      this.matching_formats = available_formats.filter(function (format) {\n        var leading_digits_patterns_count = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n        // leading digits pattern then it fits.\n\n        if (leading_digits_patterns_count === 0) {\n          return true;\n        }\n\n        var leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n        var leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]; // Brackets are required for `^` to be applied to\n        // all or-ed (`|`) parts, not just the first one.\n\n        return new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: 'shouldFormat',\n    value: function shouldFormat() {\n      // Start matching any formats at all when the national number\n      // entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives\n      // like when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Presumably the limitation of \"3 digits min\"\n      // is imposed to exclude false matches,\n      // e.g. when there are two different formats\n      // each one fitting one or two leading digits being input.\n      // But for this case I would propose a specific `if/else` condition.\n      //\n      return this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH;\n    } // Check to see if there is an exact pattern match for these digits. If so, we\n    // should use this instead of any other formatting template whose\n    // `leadingDigitsPattern` also matches the input.\n\n  }, {\n    key: 'attempt_to_format_complete_phone_number',\n    value: function attempt_to_format_complete_phone_number() {\n      for (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var format = _ref;\n        var matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n        if (!matcher.test(this.nationalNumber)) {\n          continue;\n        }\n\n        if (!this.isFormatApplicable(format)) {\n          continue;\n        } // To leave the formatter in a consistent state\n\n\n        this.resetFormat();\n        this.chosenFormat = format;\n        var formatted_number = format_national_number_using_format(this.nationalNumber, format, this.isInternational(), this.nationalPrefix !== '', this.metadata); // Special handling for NANPA countries for AsYouType formatter.\n        // Copied from Google's `libphonenumber`:\n        // https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\n        if (this.nationalPrefix && this.countryCallingCode === '1') {\n          formatted_number = '1 ' + formatted_number;\n        } // Set `this.template` and `this.partially_populated_template`.\n        //\n        // `else` case doesn't ever happen\n        // with the current metadata,\n        // but just in case.\n        //\n\n        /* istanbul ignore else */\n\n\n        if (this.createFormattingTemplate(format)) {\n          // Populate `this.partially_populated_template`\n          this.reformatNationalNumber();\n        } else {\n          // Prepend `+CountryCode` in case of an international phone number\n          var full_number = this.formatFullNumber(formatted_number);\n          this.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n          this.partially_populated_template = full_number;\n        }\n\n        return formatted_number;\n      }\n    } // Prepends `+CountryCode` in case of an international phone number\n\n  }, {\n    key: 'formatFullNumber',\n    value: function formatFullNumber(formattedNationalNumber) {\n      if (this.isInternational()) {\n        return '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n      }\n\n      return formattedNationalNumber;\n    } // Extracts the country calling code from the beginning\n    // of the entered `national_number` (so far),\n    // and places the remaining input into the `national_number`.\n\n  }, {\n    key: 'extractCountryCallingCode',\n    value: function extractCountryCallingCode() {\n      var _extractCountryCallin = _extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (!countryCallingCode) {\n        return;\n      }\n\n      this.countryCallingCode = countryCallingCode; // Sometimes people erroneously write national prefix\n      // as part of an international number, e.g. +44 (0) ....\n      // This violates the standards for international phone numbers,\n      // so \"As You Type\" formatter assumes no national prefix\n      // when parsing a phone number starting from `+`.\n      // Even if it did attempt to filter-out that national prefix\n      // it would look weird for a user trying to enter a digit\n      // because from user's perspective the keyboard \"wouldn't be working\".\n\n      this.nationalNumber = number;\n      this.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n      return this.metadata.selectedCountry() !== undefined;\n    }\n  }, {\n    key: 'extractNationalPrefix',\n    value: function extractNationalPrefix() {\n      this.nationalPrefix = '';\n\n      if (!this.metadata.selectedCountry()) {\n        return;\n      } // Only strip national prefixes for non-international phone numbers\n      // because national prefixes can't be present in international phone numbers.\n      // While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\n      var _strip_national_prefi = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata),\n          potential_national_number = _strip_national_prefi.number,\n          carrierCode = _strip_national_prefi.carrierCode;\n\n      if (carrierCode) {\n        this.carrierCode = carrierCode;\n      } // We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\n\n\n      if (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumber) && !this.isPossibleNumber(potential_national_number)) {\n        // Verify the parsed national (significant) number for this country\n        //\n        // If the original number (before stripping national prefix) was viable,\n        // and the resultant number is not, then prefer the original phone number.\n        // This is because for some countries (e.g. Russia) the same digit could be both\n        // a national prefix and a leading digit of a valid national phone number,\n        // like `8` is the national prefix for Russia and both\n        // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n        if (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern())) {\n          return;\n        }\n      }\n\n      this.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length);\n      this.nationalNumber = potential_national_number;\n      return this.nationalPrefix;\n    }\n  }, {\n    key: 'isPossibleNumber',\n    value: function isPossibleNumber(number) {\n      var validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\n      switch (validation_result) {\n        case 'IS_POSSIBLE':\n          return true;\n        // case 'IS_POSSIBLE_LOCAL_ONLY':\n        // \treturn !this.isInternational()\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: 'chooseAnotherFormat',\n    value: function chooseAnotherFormat() {\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      for (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var format = _ref2; // If this format is currently being used\n        // and is still possible, then stick to it.\n\n        if (this.chosenFormat === format) {\n          return;\n        } // If this `format` is suitable for \"as you type\",\n        // then extract the template from this format\n        // and use it to format the phone number being input.\n\n\n        if (!this.isFormatApplicable(format)) {\n          continue;\n        }\n\n        if (!this.createFormattingTemplate(format)) {\n          continue;\n        }\n\n        this.chosenFormat = format; // With a new formatting template, the matched position\n        // using the old template needs to be reset.\n\n        this.last_match_position = -1;\n        return true;\n      } // No format matches the phone number,\n      // therefore set `country` to `undefined`\n      // (or to the default country).\n\n\n      this.resetCountry(); // No format matches the national phone number entered\n\n      this.resetFormat();\n    }\n  }, {\n    key: 'isFormatApplicable',\n    value: function isFormatApplicable(format) {\n      // If national prefix is mandatory for this phone number format\n      // and the user didn't input the national prefix\n      // then this phone number format isn't suitable.\n      if (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n        return false;\n      } // If this format doesn't use national prefix\n      // but the user did input national prefix\n      // then this phone number format isn't suitable.\n\n\n      if (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'createFormattingTemplate',\n    value: function createFormattingTemplate(format) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForNumberFormatPattern(format); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (!template) {\n        return;\n      } // This one is for national number only\n\n\n      this.partially_populated_template = template; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (this.isInternational()) {\n        this.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n      } // For local numbers, replace national prefix\n      // with a digit placeholder.\n      else {\n          this.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n        } // This one is for the full phone number\n\n\n      return this.template;\n    } // Generates formatting template for a phone number format\n\n  }, {\n    key: 'getTemplateForNumberFormatPattern',\n    value: function getTemplateForNumberFormatPattern(format) {\n      // A very smart trick by the guys at Google\n      var number_pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        number_pattern = number_pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n\n\n      var dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\n        return;\n      } // Prepare the phone number format\n\n\n      var number_format = this.getFormatFormat(format); // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strict_pattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strict_pattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalNumber : `111111111` (9 digits)\n      //\n      // number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // number_format : `$1 $2 $3`\n      // dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `number_pattern`.\n      //\n      // The fix is, if `this.nationalNumber` has already sufficient length\n      // to satisfy the `number_pattern` completely then `this.nationalNumber` is used\n      // instead of `dummy_phone_number_matching_format_pattern`.\n\n      var strict_pattern = new RegExp('^' + number_pattern + '$');\n      var national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalNumber` has already sufficient length\n      // to satisfy the `number_pattern` completely then use it\n      // instead of `dummy_phone_number_matching_format_pattern`.\n\n      if (strict_pattern.test(national_number_dummy_digits)) {\n        dummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n      } // Generate formatting template for this phone number format\n\n\n      return dummy_phone_number_matching_format_pattern // Format the dummy phone number according to the format\n      .replace(new RegExp(number_pattern), number_format) // Replace each dummy digit with a DIGIT_PLACEHOLDER\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n    }\n  }, {\n    key: 'formatNextNationalNumberDigits',\n    value: function formatNextNationalNumberDigits(digits) {\n      // Using `.split('')` to iterate through a string here\n      // to avoid requiring `Symbol.iterator` polyfill.\n      // `.split('')` is generally not safe for Unicode,\n      // but in this particular case for `digits` it is safe.\n      // for (const digit of digits)\n      for (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var digit = _ref3; // If there is room for more digits in current `template`,\n        // then set the next digit in the `template`,\n        // and return the formatted digits so far.\n        // If more digits are entered than the current format could handle\n\n        if (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n          // Reset the current format,\n          // so that the new format will be chosen\n          // in a subsequent `this.chooseAnotherFormat()` call\n          // later in code.\n          this.chosenFormat = undefined;\n          this.template = undefined;\n          this.partially_populated_template = undefined;\n          return;\n        }\n\n        this.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n        this.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n      } // Return the formatted phone number so far.\n\n\n      return cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n      // \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n    }\n  }, {\n    key: 'isInternational',\n    value: function isInternational() {\n      return this.parsedInput && this.parsedInput[0] === '+';\n    }\n  }, {\n    key: 'getFormatFormat',\n    value: function getFormatFormat(format) {\n      if (this.isInternational()) {\n        return changeInternationalFormatStyle(format.internationalFormat());\n      } // If national prefix formatting rule is set\n      // for this phone number format\n\n\n      if (format.nationalPrefixFormattingRule()) {\n        // If the user did input the national prefix\n        // (or if the national prefix formatting rule does not require national prefix)\n        // then maybe make it part of the phone number template\n        if (this.nationalPrefix || !format.usesNationalPrefix()) {\n          // Make the national prefix part of the phone number template\n          return format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n        }\n      } // Special handling for NANPA countries for AsYouType formatter.\n      // Copied from Google's `libphonenumber`:\n      // https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n      else if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\n          return '1 ' + format.format();\n        }\n\n      return format.format();\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: 'determineTheCountry',\n    value: function determineTheCountry() {\n      this.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata);\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: 'getNumber',\n    value: function getNumber() {\n      if (!this.countryCallingCode || !this.nationalNumber) {\n        return undefined;\n      }\n\n      var phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata);\n\n      if (this.carrierCode) {\n        phoneNumber.carrierCode = this.carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    } // This method is still used in `react-phone-number-input/source/input-control.js`.\n\n  }, {\n    key: 'getNationalNumber',\n    value: function getNationalNumber() {\n      return this.nationalNumber;\n    }\n  }, {\n    key: 'getTemplate',\n    value: function getTemplate() {\n      if (!this.template) {\n        return;\n      }\n\n      var index = -1;\n      var i = 0;\n\n      while (i < this.parsedInput.length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cut_stripping_dangling_braces(this.template, index + 1);\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport default AsYouType;\nexport function strip_dangling_braces(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray4) {\n      if (_i4 >= _iterator4.length) break;\n      _ref4 = _iterator4[_i4++];\n    } else {\n      _i4 = _iterator4.next();\n      if (_i4.done) break;\n      _ref4 = _i4.value;\n    }\n\n    var index = _ref4;\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function cut_stripping_dangling_braces(string, cut_before_index) {\n  if (string[cut_before_index] === ')') {\n    cut_before_index++;\n  }\n\n  return strip_dangling_braces(string.slice(0, cut_before_index));\n}\nexport function close_dangling_braces(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n} // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n    var _ref5;\n\n    if (_isArray5) {\n      if (_i5 >= _iterator5.length) break;\n      _ref5 = _iterator5[_i5++];\n    } else {\n      _i5 = _iterator5.next();\n      if (_i5.done) break;\n      _ref5 = _i5.value;\n    }\n\n    var character = _ref5;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}","import Metadata from './metadata';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}","import PhoneNumber from './PhoneNumber';\nexport default function getExampleNumber(country, examples, metadata) {\n  if (examples[country]) {\n    return new PhoneNumber(country, examples[country], metadata);\n  }\n}","import AsYouType from './AsYouType';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}","export { default as ParseError } from '../es6/ParseError';\nexport { default as parsePhoneNumber } from '../es6/parsePhoneNumber';\nexport { default as parsePhoneNumberFromString } from '../es6/parsePhoneNumberFromString';\nexport { default as findNumbers } from '../es6/findNumbers';\nexport { default as searchNumbers } from '../es6/searchNumbers';\nexport { default as PhoneNumberMatcher } from '../es6/PhoneNumberMatcher';\nexport { default as AsYouType } from '../es6/AsYouType';\nexport { default as getCountries } from '../es6/getCountries';\nexport { default as Metadata, isSupportedCountry, getCountryCallingCode, getExtPrefix } from '../es6/metadata';\nexport { default as getExampleNumber } from '../es6/getExampleNumber';\nexport { default as formatIncompletePhoneNumber } from '../es6/formatIncompletePhoneNumber';\nexport { default as parseIncompletePhoneNumber, parsePhoneNumberCharacter } from '../es6/parseIncompletePhoneNumber';\nexport { default as parseDigits } from '../es6/parseDigits';\nexport { parseRFC3966, formatRFC3966 } from '../es6/RFC3966';","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _metadataMin = require('libphonenumber-js/metadata.min.json');\n\nvar _metadataMin2 = _interopRequireDefault(_metadataMin);\n\nvar _PhoneInputNativeDefaults = require('./PhoneInputNativeDefaults');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Deprecated.\n// This is a file used in legacy `/index.js` export entry.\n// In some next major version this file will be removed\n// and `/index.js` will be redirected to `/min/index.js`.\n\n\nexports.default = (0, _PhoneInputNativeDefaults.createPhoneInput)(_metadataMin2.default);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.labels = exports.metadata = undefined;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar metadata = exports.metadata = _propTypes2.default.shape({\n  country_calling_codes: _propTypes2.default.object.isRequired,\n  countries: _propTypes2.default.object.isRequired\n});\n\nvar labels = exports.labels = _propTypes2.default.objectOf(_propTypes2.default.string);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCountryCodes = getCountryCodes;\nexports.getCountryCodeForFlag = getCountryCodeForFlag; // See the table of officially assigned ISO 3166-1 alpha-2 country codes:\n// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes\n\nvar SKIP_COUNTRIES = exports.SKIP_COUNTRIES = [// \"001\" means \"Non-Geographical Entity\" (\"No country\", \"International\").\n'001'];\n\nfunction getCountryCodes(labels) {\n  // Includes all country codes (excluding \"ZZ\" for \"International\").\n  //\n  // From ISO 3166-1:2006(E/F):\n  //\n  // 8.1.3   User-assigned code elements\n  //\n  // If users need code elements to represent country names not included\n  // in this part of ISO 3166, the series of letters AA, QM to QZ, XA\n  // to XZ, and ZZ, and the series AAA to AAZ, QMA to QZZ, XAA to XZZ,\n  // and ZZA to ZZZ respectively, and the series of numbers 900 to 999\n  // are available. These users should inform the ISO 3166/MA of such use.\n  //\n  return Object.keys(labels).filter(function (key) {\n    return key.length === 2 && key.toUpperCase() === key && key !== 'ZZ' && SKIP_COUNTRIES.indexOf(key) < 0;\n  });\n}\n\nfunction getCountryCodeForFlag(country) {\n  switch (country) {\n    // \"Ascension Island\".\n    // The flag is missing for it:\n    // https://lipis.github.io/flag-icon-css/flags/4x3/ac.svg\n    // GitHub issue:\n    // https://github.com/lipis/flag-icon-css/issues/537\n    // Using \"SH\" flag as a temporary substitute\n    // because previously \"AC\" and \"TA\" were parts of \"SH\".\n    case 'AC':\n      return 'SH';\n    // \"Tristan da Cunha\".\n    // The flag is missing for it:\n    // https://lipis.github.io/flag-icon-css/flags/4x3/ta.svg\n    // GitHub issue:\n    // https://github.com/lipis/flag-icon-css/issues/537\n    // Using \"SH\" flag as a temporary substitute\n    // because previously \"AC\" and \"TA\" were parts of \"SH\".\n\n    case 'TA':\n      return 'SH';\n\n    default:\n      return country;\n  }\n}","export { default } from './modules/PhoneInputNativeDefaultMetadata';\nexport { parseRFC3966, formatRFC3966 } from './modules/libphonenumber/RFC3966';\nexport { default as parsePhoneNumber } from './modules/libphonenumber/parsePhoneNumberDefaultMetadata';\nexport { default as formatPhoneNumber, formatPhoneNumberIntl } from './modules/formatPhoneNumberDefaultMetadata';\nexport { default as isValidPhoneNumber } from './modules/isValidPhoneNumberDefaultMetadata'; // Deprecated export.\n// Use `import PhoneInput from 'react-phone-number-input/core'` instead.\n\nexport { default as PhoneInput } from './modules/PhoneInput'; // Just a re-export of `getCountryCallingCode()` because people keep asking for it.\n// https://github.com/catamphetamine/react-phone-number-input/issues/284\n\nexport { getCountryCallingCode } from 'libphonenumber-js/min';","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.createPhoneInput = createPhoneInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _default = require('../locale/default.json');\n\nvar _default2 = _interopRequireDefault(_default);\n\nvar _InternationalIcon = require('./InternationalIcon');\n\nvar _InternationalIcon2 = _interopRequireDefault(_InternationalIcon);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _PhoneInputNative = require('./PhoneInputNative');\n\nvar _PhoneInputNative2 = _interopRequireDefault(_PhoneInputNative);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction createPhoneInput(defaultMetadata) {\n  var _class, _temp2;\n\n  return _temp2 = _class = function (_Component) {\n    _inherits(PhoneInputNativeDefaults, _Component);\n\n    function PhoneInputNativeDefaults() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, PhoneInputNativeDefaults);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNativeDefaults.__proto__ || Object.getPrototypeOf(PhoneInputNativeDefaults)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n        return _this.input = ref;\n      }, _this.render = function () {\n        return _react2.default.createElement(_PhoneInputNative2.default, _extends({\n          ref: _this.storeInputRef\n        }, _this.props));\n      }, _this.focus = function () {\n        return _this.input.focus();\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return PhoneInputNativeDefaults;\n  }(_react.Component), _class.propTypes = {\n    metadata: _PropTypes.metadata.isRequired,\n    labels: _PropTypes.labels.isRequired,\n    internationalIcon: _propTypes2.default.elementType.isRequired\n  }, _class.defaultProps = {\n    metadata: defaultMetadata,\n    labels: _default2.default,\n    internationalIcon: _InternationalIcon2.default\n  }, _temp2;\n}\n\nexports.default = createPhoneInput();","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = InternationalIcon;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction InternationalIcon() {\n  return _react2.default.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }, _react2.default.createElement(\"path\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), _react2.default.createElement(\"path\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), _react2.default.createElement(\"path\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), _react2.default.createElement(\"path\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), _react2.default.createElement(\"line\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), _react2.default.createElement(\"line\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  }), _react2.default.createElement(\"path\", {\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _PhoneInput = require('./PhoneInput');\n\nvar _PhoneInput2 = _interopRequireDefault(_PhoneInput);\n\nvar _CountrySelectNative = require('./CountrySelectNative');\n\nvar _CountrySelectNative2 = _interopRequireDefault(_CountrySelectNative);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PhoneInputNative = (_temp2 = _class = function (_Component) {\n  _inherits(PhoneInputNative, _Component);\n\n  function PhoneInputNative() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, PhoneInputNative);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNative.__proto__ || Object.getPrototypeOf(PhoneInputNative)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n      return _this.input = ref;\n    }, _this.focus = function () {\n      return _this.input.focus();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // These two country-select-related properties are\n  // implemented as `defaultProps` instead of passing them\n  // directly to the `<PhoneInput/>` because `<PhoneInputNative/>`\n  // is the default export of this library and therefore people pass\n  // `countrySelectComponent` property to this `<PhoneInputNative/>` component\n  // and when they don't see any changes they might get confused.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/229\n\n\n  _createClass(PhoneInputNative, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(_PhoneInput2.default, _extends({\n        ref: this.storeInputRef\n      }, this.props));\n    } // Proxy `.focus()` method.\n\n  }]);\n\n  return PhoneInputNative;\n}(_react.Component), _class.propTypes = {\n  // (optional)\n  // Replaces the default country select arrow.\n  countrySelectArrowComponent: _propTypes2.default.elementType\n}, _class.defaultProps = {\n  countrySelectComponent: _CountrySelectNative2.default,\n  countrySelectProperties: COUNTRY_SELECT_PROPERTIES\n}, _temp2);\nexports.default = PhoneInputNative;\nvar COUNTRY_SELECT_PROPERTIES = {\n  countrySelectArrowComponent: 'selectArrowComponent'\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nfunction createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  var InputBasic = function (_PureComponent) {\n    _inherits(InputBasic, _PureComponent);\n\n    function InputBasic() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, InputBasic);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputBasic.__proto__ || Object.getPrototypeOf(InputBasic)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onChange = function (event) {\n        var onChange = _this.props.onChange;\n        var value = _this.state.value;\n        var newValue = (0, _core.parseIncompletePhoneNumber)(event.target.value); // By default, if a value is something like `\"(123)\"`\n        // then Backspace would only erase the rightmost brace\n        // becoming something like `\"(123\"`\n        // which would give the same `\"123\"` value\n        // which would then be formatted back to `\"(123)\"`\n        // and so a user wouldn't be able to erase the phone number.\n        // Working around this issue with this simple hack.\n\n        if (newValue === value) {\n          if (_this.format(newValue).indexOf(event.target.value) === 0) {\n            // Trim the last digit (or plus sign).\n            newValue = newValue.slice(0, -1);\n          }\n        } // Prevents React from resetting the `<input/>` caret position.\n        // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n        // https://github.com/facebook/react/issues/955\n\n\n        _this.setState({\n          value: newValue\n        }, function () {\n          return onChange(newValue);\n        });\n      }, _this.onBlur = function (event) {\n        var onBlur = _this.props.onBlur;\n        var value = _this.state.value;\n\n        if (onBlur) {\n          // `event` is React's `SyntheticEvent`.\n          // Its `.value` is read-only therefore cloning it.\n          var _event = _extends({}, event, {\n            target: _extends({}, event.target, {\n              value: value\n            }) // Workaround for `redux-form` event detection.\n            // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n          });\n\n          _event.stopPropagation = event.stopPropagation;\n          _event.preventDefault = event.preventDefault;\n          return onBlur(_event);\n        }\n      }, _this.focus = function () {\n        return _this.input.focus();\n      }, _this.storeInput = function (ref) {\n        return _this.input = ref;\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(InputBasic, [{\n      key: 'format',\n      value: function format(value) {\n        var _props = this.props,\n            country = _props.country,\n            metadata = _props.metadata;\n        return (0, _core.formatIncompletePhoneNumber)(value, country, metadata);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _props2 = this.props,\n            onChange = _props2.onChange,\n            onFocus = _props2.onFocus,\n            country = _props2.country,\n            metadata = _props2.metadata,\n            Input = _props2.inputComponent,\n            rest = _objectWithoutProperties(_props2, ['onChange', 'onFocus', 'country', 'metadata', 'inputComponent']); // Prevents React from resetting the `<input/>` caret position.\n        // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n        // https://github.com/facebook/react/issues/955\n\n\n        var value = this.state.value; // Deprecated. Should be removed in a future major version release.\n        // `type=\"tel\"` and `autoComplete=\"tel\"` properties are here\n        // just for the \"Without country select\" component exported from\n        // `react-phone-number-input/basic-input` subpackage.\n        // These two properties will be overwritten by `<PhoneInput/>` properties\n        // when not used as a \"Without country select\" component.\n\n        return _react2.default.createElement(Input, _extends({\n          type: 'tel',\n          autoComplete: 'tel'\n        }, rest, {\n          ref: this.storeInput,\n          value: this.format(value),\n          onChange: this.onChange,\n          onFocus: onFocus,\n          onBlur: this.onBlur\n        }));\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      // Prevents React from resetting the `<input/>` caret position.\n      // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n      // https://github.com/facebook/react/issues/955\n      value: function getDerivedStateFromProps(_ref2) {\n        var value = _ref2.value;\n        return {\n          value: value\n        };\n      } // This `onBlur` interceptor is a workaround for `redux-form`'s bug\n      // so that it gets the up-to-date `value` in its `onBlur` handler.\n      // Without this fix it just gets the actual (raw) input field textual value.\n      // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n      //\n      // New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n      // https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n      // `redux-form` shouldn't have taken the new `value` from `event`.\n      //\n      // A developer is not supposed to pass this `onBlur` property manually.\n      // Instead, `redux-form` passes `onBlur` to this component automatically\n      // and this component patches that `onBlur` handler (a hacky way but works).\n      //\n\n    }]);\n\n    return InputBasic;\n  }(PureComponent);\n\n  InputBasic.propTypes = {\n    // The parsed phone number.\n    // \"Parsed\" not in a sense of \"E.164\"\n    // but rather in a sense of \"having only\n    // digits and possibly a leading plus character\".\n    // Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n    value: _propTypes2.default.string.isRequired,\n    // Updates the `value`.\n    onChange: _propTypes2.default.func.isRequired,\n    // Toggles the `--focus` CSS class.\n    // https://github.com/catamphetamine/react-phone-number-input/issues/189\n    onFocus: _propTypes2.default.func,\n    // `onBlur` workaround for `redux-form`'s bug.\n    onBlur: _propTypes2.default.func,\n    // A two-letter country code for formatting `value`\n    // as a national phone number (e.g. `(800) 555 35 35`).\n    // E.g. \"US\", \"RU\", etc.\n    // If no `country` is passed then `value`\n    // is formatted as an international phone number.\n    // (e.g. `+7 800 555 35 35`)\n    country: _propTypes2.default.string,\n    // `libphonenumber-js` metadata.\n    metadata: _propTypes2.default.object.isRequired,\n    // The `<input/>` component.\n    inputComponent: _propTypes2.default.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return (0, _reactLifecyclesCompat.polyfill)(InputBasic);\n}\n\nexports.default = createInput();","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _countries = require('./countries');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\n\nvar FlagComponent = function FlagComponent(_ref) {\n  var country = _ref.country,\n      flags = _ref.flags,\n      flagsPath = _ref.flagsPath,\n      className = _ref.className;\n\n  if (flags && flags[country]) {\n    return flags[country]();\n  }\n\n  return _react2.default.createElement('img', {\n    alt: country,\n    className: 'react-phone-number-input__icon-image',\n    src: '' + flagsPath + (0, _countries.getCountryCodeForFlag)(country).toLowerCase() + '.svg'\n  });\n};\n\nFlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: _propTypes2.default.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `flag-icon-css` github repo.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: _propTypes2.default.objectOf(_propTypes2.default.elementType),\n  // A base URL path for national flag SVG icons.\n  // By default it uses the ones from `flag-icon-css` github repo.\n  flagsPath: _propTypes2.default.string.isRequired\n};\nexports.default = FlagComponent;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPreSelectedCountry = getPreSelectedCountry;\nexports.getCountrySelectOptions = getCountrySelectOptions;\nexports.parsePhoneNumber = parsePhoneNumber;\nexports.generateNationalNumberDigits = generateNationalNumberDigits;\nexports.migrateParsedInputForNewCountry = migrateParsedInputForNewCountry;\nexports.e164 = e164;\nexports.trimNumber = trimNumber;\nexports.getCountryForPartialE164Number = getCountryForPartialE164Number;\nexports.parseInput = parseInput;\nexports.get_country_from_possibly_incomplete_international_phone_number = get_country_from_possibly_incomplete_international_phone_number;\nexports.compare_strings = compare_strings;\nexports.strip_country_calling_code = strip_country_calling_code;\nexports.get_national_significant_number_part = get_national_significant_number_part;\nexports.could_number_belong_to_country = could_number_belong_to_country;\n\nvar _core = require('libphonenumber-js/core');\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\n\nfunction getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata) {\n  // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && !includeInternationalOption && countries && countries.length > 0) {\n    country = countries[0];\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\n\nfunction getCountrySelectOptions(countries, country_names, includeInternationalOption) {\n  // Generates a `<Select/>` option for each country.\n  var country_select_options = countries.map(function (country) {\n    return {\n      value: country,\n      label: country_names[country]\n    };\n  }); // Sort the list of countries alphabetically.\n\n  country_select_options.sort(function (a, b) {\n    return compare_strings(a.label, b.label);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (includeInternationalOption) {\n    country_select_options.unshift({\n      label: country_names.ZZ\n    });\n  }\n\n  return country_select_options;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\n\nfunction parsePhoneNumber(value, metadata) {\n  return (0, _core.parsePhoneNumberFromString)(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\n\nfunction generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\n\nfunction migrateParsedInputForNewCountry(value, previous_country, new_country, metadata, preferNationalFormat) {\n  // If `parsed_input` is empty\n  // then no need to migrate anything.\n  if (!value) {\n    return value;\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `value` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (new_country) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (value[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (preferNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\n        // if (derived_country === new_country)\n        // {\n        // \treturn strip_country_calling_code(value, derived_country, metadata)\n        // }\n        // Simply strip the leading `+` character\n        // therefore simply converting all digits into a \"local\" phone number.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        return value.slice(1);\n      } // If the international phone number already contains\n      // any country calling code then trim the country calling code part.\n      // (that could also be the newly selected country phone code prefix as well)\n      // `value` doesn't neccessarily belong to `previous_country`.\n      // (e.g. if a user enters an international number\n      //  not belonging to any of the reduced `countries` list).\n\n\n      value = strip_country_calling_code(value, previous_country, metadata); // Prepend country calling code prefix\n      // for the newly selected country.\n\n      return e164(value, new_country, metadata) || '+' + (0, _core.getCountryCallingCode)(new_country, metadata);\n    }\n  } // If switching to \"International\" from a country.\n  else {\n      // If the phone number was entered in national format.\n      if (value[0] !== '+') {\n        // Format the national phone number as an international one.\n        // The phone number entered not necessarily even starts with\n        // the previously selected country phone prefix.\n        // Even if the phone number belongs to whole another country\n        // it will still be parsed into some national phone number.\n        return e164(value, previous_country, metadata) || '';\n      }\n    }\n\n  return value;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nfunction e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // If there are any digits then the `value` is returned as is.\n\n\n    return number;\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = get_national_significant_number_part(number, country, metadata);\n\n  if (partial_national_significant_number) {\n    return '+' + (0, _core.getCountryCallingCode)(country, metadata) + partial_national_significant_number;\n  }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\n\nfunction trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = get_national_significant_number_part(number, country, metadata);\n  var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n  if (overflowDigitsCount > 0) {\n    return number.slice(0, number.length - overflowDigitsCount);\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new _core.Metadata(metadata);\n  metadata.country(country); // Return the last \"possible length\".\n\n  return metadata.possibleLengths()[metadata.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nfunction getCountryForPartialE164Number(partialE164Number, country, countries, includeInternationalOption, metadata) {\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && includeInternationalOption && !could_number_belong_to_country(partialE164Number, country, metadata)) {\n      return undefined;\n    } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevInput — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\n\nfunction parseInput(input, prevInput, country, countries, includeInternationalOption, limitMaxLength, metadata) {\n  // Trim the input to not exceed the maximum possible number length.\n  if (input && country && limitMaxLength) {\n    input = trimNumber(input, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n\n\n  if (input && !country && input[0] !== '+') {\n    input = '+' + input;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!input && prevInput && prevInput[0] === '+') {\n    country = undefined;\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (input === '+' && prevInput && prevInput[0] === '+' && prevInput.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value = void 0;\n\n  if (input) {\n    if (input[0] === '+') {\n      if (input !== '+') {\n        value = input;\n      }\n    } else {\n      value = e164(input, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, country, countries, includeInternationalOption, metadata);\n  }\n\n  return {\n    input: input,\n    country: country,\n    value: value\n  };\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nfunction get_country_from_possibly_incomplete_international_phone_number(number, metadata) {\n  var formatter = new _core.AsYouType(null, metadata);\n  formatter.input(number); // `001` is a special \"non-geograpical entity\" code\n  // in Google's `libphonenumber` library.\n\n  if (formatter.country === '001') {\n    return;\n  }\n\n  return formatter.country;\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n */\n\n\nfunction compare_strings(a, b) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\n\nfunction strip_country_calling_code(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var country_calling_prefix = '+' + (0, _core.getCountryCallingCode)(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < country_calling_prefix.length) {\n      if (country_calling_prefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(country_calling_prefix) === 0) {\n        return number.slice(country_calling_prefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _iterator = Object.keys(metadata.country_calling_codes), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country_calling_code = _ref;\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\n\nfunction get_national_significant_number_part(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new _core.AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  return formatter.getNationalNumber();\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\n\nfunction could_number_belong_to_country(number, country, metadata) {\n  var country_calling_code = (0, _core.getCountryCallingCode)(country, metadata);\n  var i = 0;\n\n  while (i + 1 < number.length && i < country_calling_code.length) {\n    if (number[i + 1] !== country_calling_code[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CountrySelectNative = (_temp2 = _class = function (_Component) {\n  _inherits(CountrySelectNative, _Component);\n\n  function CountrySelectNative() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CountrySelectNative);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CountrySelectNative.__proto__ || Object.getPrototypeOf(CountrySelectNative)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (event) {\n      var onChange = _this.props.onChange;\n      var value = event.target.value;\n      onChange(value === 'ZZ' ? undefined : value);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(CountrySelectNative, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          name = _props.name,\n          value = _props.value,\n          options = _props.options,\n          onFocus = _props.onFocus,\n          onBlur = _props.onBlur,\n          disabled = _props.disabled,\n          tabIndex = _props.tabIndex,\n          className = _props.className,\n          SelectArrow = _props.selectArrowComponent;\n      var selectedOption = void 0;\n\n      for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        var option = _ref2;\n\n        if (!option.divider && option.value === value) {\n          selectedOption = option;\n        }\n      }\n\n      return _react2.default.createElement('div', {\n        className: (0, _classnames2.default)(className, 'react-phone-number-input__country--native')\n      }, selectedOption && _react2.default.createElement(selectedOption.icon, {\n        value: value\n      }), _react2.default.createElement('select', {\n        name: name,\n        value: value || 'ZZ',\n        onChange: this.onChange,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        disabled: disabled,\n        tabIndex: tabIndex,\n        'aria-label': this.props['aria-label'],\n        className: 'react-phone-number-input__country-select'\n      }, options.map(function (_ref3) {\n        var value = _ref3.value,\n            label = _ref3.label,\n            divider = _ref3.divider;\n        return _react2.default.createElement('option', {\n          key: divider ? '|' : value || 'ZZ',\n          value: divider ? '|' : value || 'ZZ',\n          disabled: divider ? true : false,\n          className: divider ? 'react-phone-number-input__country-select-divider' : undefined\n        }, label);\n      })), _react2.default.createElement(SelectArrow, null));\n    }\n  }]);\n\n  return CountrySelectNative;\n}(_react.Component), _class.propTypes = {\n  // A two-letter country code.\n  // E.g. \"US\", \"RU\", etc.\n  value: _propTypes2.default.string,\n  // Updates the `value`.\n  onChange: _propTypes2.default.func.isRequired,\n  // `<select/>` options.\n  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    value: _propTypes2.default.string,\n    label: _propTypes2.default.string,\n    divider: _propTypes2.default.bool\n  })).isRequired,\n  // HTML `name` attribute.\n  name: _propTypes2.default.string,\n  // HTML `disabled` attribute.\n  disabled: _propTypes2.default.bool,\n  // HTML `tabIndex` attribute.\n  tabIndex: _propTypes2.default.number,\n  // Select arrow component.\n  selectArrowComponent: _propTypes2.default.elementType.isRequired,\n  // Toggles the `--focus` CSS class.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/189\n  onFocus: _propTypes2.default.func,\n  // Toggles the `--focus` CSS class.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/189\n  onBlur: _propTypes2.default.func\n}, _class.defaultProps = {\n  selectArrowComponent: function selectArrowComponent() {\n    return _react2.default.createElement('div', {\n      className: 'react-phone-number-input__country-select-arrow'\n    });\n  }\n}, _temp2);\nexports.default = CountrySelectNative;"],"sourceRoot":""}